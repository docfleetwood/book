{
  "hash": "bd211ebdb66ead9ede1235040b3d26e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  echo: true\n---\n\n\n# Acquire {#sec-acquire-chapter}\n\n\n\n\n\n\n> The scariest moment is always just before you start.\n>\n> --- Stephen King\n\n::: {.callout}\n**{{< fa regular list-alt >}} Outcomes**\n\n- Identify common strategies for acquiring corpus data.\n- Describe how to organize and document data acquisition to support reproducibility.\n- Recall R programming concepts and strategies relevant to acquiring data.\n:::\n\n\n::: {.cell}\n\n:::\n\n\nAs we start down the path to executing our research blueprint, our first step is to acquire the primary data that will be employed in the project. This chapter covers two commonly-used strategies for acquiring corpus data: downloads and APIs. We will encounter various file formats and folder structures in the process and we will address how to effectively organize our data for subsequent processing. Crucial to our efforts is the process of documenting our data. We will learn to provide data origin information to ensure key characteristics of the data and its source are documented. Along the way, we will explore R coding concepts including control statements and custom functions relevant to the task of acquiring data. By the end of this chapter, you will not only be adept at acquiring data from diverse sources but also capable of documenting it comprehensively, enabling you to replicate the process in the future.\n\n::: {.callout}\n**{{< fa terminal >}} Lessons**\n\n**What**: [Control Statements, Custom Functions](https://github.com/qtalr/lessons)\\\n**How**: In an R console, load `swirl`, run `swirl()`, and follow prompts to select the lesson.\\\n**Why**: To recognize the logic behind code that can make dynamic choices and to recall how functions serve to produce efficient, reusable, and more legible code.\n:::\n\n## Downloads\n\nThe most common and straightforward method for acquiring corpus data is through direct downloads. In a nutshell, this method involves navigating to a website, locating the data, and downloading it to your computing environment. In some cases access to the data requires manual intervention and in others the process can be implemented programmatically. The data may be contained in a single file or multiple files. The files may be compressed or uncompressed. The data may be hierarchically organized or not. Each resource will have its own unique characteristics that will influence the process of acquiring the data. In this section we will work through a few examples to demonstrate the general process of acquiring data through downloads.\n\n### Manual\n\nIn contrast to the other data acquisition methods we will cover in this chapter, **manual downloads** require human intervention. This means that manual downloads are non-reproducible in a strict sense and require that we keep track of and document our procedure. It is a very common for research projects to acquire data through manual downloads as many data resources require some legwork before they are accessible for downloading. These can be resources that require institutional or private licensing and fees, require authorization/ registration, and/ or are only accessible via resource search interfaces.\n\nThe resource we will use for this demonstration is the [Corpus Escrito del Español como L2 (CEDEL2)](http://cedel2.learnercorpora.com/) [@Lozano2009], a corpus of Spanish learner writing. It includes L2 writing from students with a variety of L1 backgrounds. For comparative puposes it also includes native writing for Spanish, English, and several other languages.\n\nThe CEDEL2 corpus is a freely available resource, but to access the data you must first use a search interface to select the relevant characteristics of the data of interest. Following the search/ download link you can find a search interface that allows the user to select the subcorpus and filter the results by a set of attributes, seen in @fig-ad-cedel2-search.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Search and download interface for the CEDEL2 Corpus](figures/ad-cedel2-search.png){#fig-ad-cedel2-search width=100%}\n:::\n:::\n\n\nFor this example let's assume that we want to acquire data to use in a study comparing the use of the Spanish preterite and imperfect past tense aspect in written texts by English L1 learners of Spanish to native Spanish speakers. To acquire data for such a project, we will first select the subcorpus \"Learners of L2 Spanish\". We will set the results to provide full texts and filter the results to \"L1 English - L2 Spanish\". Additionally, we will set the medium to \"Written\". This will provide us with a set of texts for the L2 learners that we can use for our study. The search parameters and results are shown in @fig-ad-cedel2-results.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Search results for the CEDEL2 Corpus](figures/ad-cedel2-results.png){#fig-ad-cedel2-results width=100%}\n:::\n:::\n\n\nThe 'Download' link now appears for this search criteria. Following this link will provide the user a form to fill out. This particular resource allows for access to different formats to download (Texts only, Texts with metadata, CSV (Excel), CSV (Others)). I will select the 'CSV (Others)' option so that the data is structured for easier processing downstream in subsequent processing steps. Then I save the CSV in the *data/original/* directory of my project and create a sub-directory named *cedel2/*, as seen in @exm-ad-cedel2-learners-download.\n\n::: {#exm-ad-cedel2-learners-download}\nDownload CEDEL2 L2 Spanish Learners data\n\n```bash\ndata/\n├── analysis/\n├── derived/\n└── original/\n    └── cedel2/\n    └── cedel2-l1-english-learners.csv\n```\n:::\n\nNote that the file is named *cedel2-l1-english-learners.csv* to reflect the search criteria used to acquire the data. In combination with other data documentation, this will help us to maintain transparency.\n\nNow, after downloading the L2 learner and the native speaker data into the appropriate directory, we move on to the next processing step, right? Not so fast! Imagine we are working on a project with a collaborator. How will they know where the data came from? What if we need to come back to this data in the future? How will we know what characteristics we used to filter the data? The directory and filenames may not be enough. To address these questions we need to document the origin of the data, and in the case of data acquired through manual downloads, we need to document the procedures we took to acquire the data to the best of our ability.\n\nAs discussed in @sec-ud-data-origin, all acquired data should be accompanied by a data origin file. The majority of this information can typically be identified on the resource's website and/ or the resource's documentation. In the case of the CEDEL2 corpus, the corpus homepage provides most of the information we need.\n\nStructurally, data documentation files should be stored close to the data they describe. So for our data origin file this means adding it to the *data/original/* directory. Naming the file in a transparent way is also important. I've named the file *cedel2_do.csv* to reflect the name of the corpus, the meaning of the file as data origin with a suffixed *_do*, and the file extension *.csv* to reflect the file format. CSV files reflect tabular content. It is not required that data origin files are tabular, but it makes it easier to read and display them in literate programming documents.\n\n::: {.callout}\n**{{< fa regular hand-point-up >}} Tip**\n\nThere are many ways to create and edit CSV files. You can use a spreadsheet program like MS Excel or Google Sheets, a text editor like Notepad or TextEdit, or a code editor like RStudio or VS Code. The `qtkit` package provides a convenient function, `create_data_origin()` to create a CSV file with the data origin boilerplate structure. This CSV file then can be edited to add the relevant information in any of the above mentioned programs.\n\nUsing a spreadsheet program is the easiest method for editing tabular data. The key is to save the file as a CSV file, and not as an Excel file, to maintain our adherence to the principle of using open formats for reproducible research.\n:::\n\nIn @tbl-ad-cedel2-do, I've created a data origin file for the CEDEL2 corpus.\n\n\n::: {#tbl-ad-cedel2-do .cell tbl-cap='Data origin file for the CEDEL2 corpus' tbl-colwidths='[25,75]'}\n::: {.cell-output-display}\n\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| attribute               | description                                                                                                                                                                                                                                                                                                                                                                         |\n+=========================+=====================================================================================================================================================================================================================================================================================================================================================================================+\n| Resource name           | CEDEL2: Corpus Escrito del Español como L2.                                                                                                                                                                                                                                                                                                                                         |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data source             | http://cedel2.learnercorpora.com/, https://doi.org/10.1177/02676583211050522                                                                                                                                                                                                                                                                                                        |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data sampling frame     | Corpus that contains samples of the language produced from learners of Spanish as a second language. For comparative purposes, it also contains a native control subcorpus of the language produced by native speakers of Spanish from different varieties (peninsular Spanish and all varieties of Latin American Spanish), so it can be used as a native corpus in its own right. |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data collection date(s) | 2006-2020.                                                                                                                                                                                                                                                                                                                                                                          |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data format             | CSV file. Each row corresponds to a writing sample. Each column is an attribute of the writing sample.                                                                                                                                                                                                                                                                              |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Data schema             | A CSV file for L2 learners and a CSV file for native speakers.                                                                                                                                                                                                                                                                                                                      |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| License                 | CC BY-NC-ND 3.0 ES                                                                                                                                                                                                                                                                                                                                                                  |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Attribution             | Lozano, C. (2022). CEDEL2: Design, compilation and web interface of an online corpus for L2 Spanish acquisition research. Second Language Research, 38(4), 965-983. https://doi.org/10.1177/02676583211050522.                                                                                                                                                                      |\n+-------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n:::\n:::\n\n\nGiven this is a manual download we also need to document the procedure used to retrieve the data in prose. The script in the *process/* directory that is typically used to acquire the data is not used to programmatically retrieve data in this case. However, to keep things predictable we will use this file to document the download procedure. I've created a Quarto file named *1_acquire_data.qmd* in the *process/* directory of my project.\n\nA glimpse at the directory structure of the project at this point is seen in @exm-ad-cedel2-structure.\n\n::: {#exm-ad-cedel2-structure}\nProject structure for the CEDEL2 corpus data acquisition\n\n```bash\nproject/\n├── process/\n│   ├── 1_acquire_data.qmd\n│   └── ...\n├── data/\n│   ├── analysis/\n│   ├── derived/\n│   └── original/\n│       ├── cedel2_do.csv\n│       └── cedel2/\n│           ├── cedel2-l1-english-learners.csv\n│           └── cedel2-native-spanish-speakers.csv\n├── reports/\n├── DESCRIPTION\n├── Makefile\n└── README\n```\n:::\n\nEven though the *1_acquire_data.qmd* file is not used to programmatically retrieve the data, it is still a useful place to document the download procedure. This includes the URL of the resource, the search criteria used to filter the data, and the file format and location of the data. It is also good to include and display your data origin file in this file as a formatted table.\n\nManually downloading other resources will inevitably include unique processes for obtaining the data, but in the end the data should be archived in the project structure in the *data/original/* directory and documented in the appropriate places. Note that acquired data is always treated as 'read-only', meaning it is not modified in any way. This gives us a fixed starting point for subsequent steps in the data preparation process.\n\n### Programmatic\n\nThere are many resources that provide corpus data that is directly accessible for which programmatic downloads can be applied. A **programmatic download** is a download in which the process can be automated through code. Thus, this is a reproducible process. The data can be acquired by anyone with access to the necessary code.\n\nIn this case, and subsquent data acquisition procedures in this chapter, we use the *1_acquire_data.qmd* Quarto file to its full potential intermingling prose, code, and code comments to execute and document the download procedure.\n\nTo illustrate how this works to conduct a programmatic download, we will work with the Switchboard Dialog Act Corpus (SWDA) [@SWDA2008]. The version that we will use is found on the Linguistic Data Consortium under the [Switchboard-1 Release 2 Corpus](https://catalog.ldc.upenn.edu/LDC97S62). The corpus and related documentation are linked on the catalog page <https://catalog.ldc.upenn.edu/docs/LDC97S62/>.\n\nFrom the documentation we learn that the corpus contains transcripts for 1155 5-minute two-way telephone conversations among English speakers for all areas of the United States. The speakers were given a topic to discuss and the conversations were recorded. The corpus metadata and annotations for sociolinguistic and discourse features.\n\nThis corpus, as you can image, could support a wide range of interesting reseach questions. Let's assume we are following research conducted by @Tottie2011 to explore the use of filled pauses such as \"um\" and \"uh\" and traditional sociolinguistic variables such as sex, age, and education in spontaneous speech by American English speakers.\n\nWith this goal in mind, let's get started writing the code to download and organize the data in our project directory. First, we need to identify the URL (Uniform Resource Locator) for the data that we want to download. More often than not this file will be some type of compressed archive file with an extension such as *.zip* (Zipped file), *.tar* (Tarball file), or *tar.gz* (Gzipped tarball file), which is the case for the SWDA corpus. Compressed files make downloading multiple files easy by grouping files and directories into one file.\n\n::: {.callout}\n**{{< fa regular lightbulb >}} Consider this**\n\nYou may be wondering what the difference betwen *.zip*, *.tar*, and *.tar.gz* files are. The *.zip* file format is the most common. It groups file and directories into one file (an archive) and compresses it to reduce the size of the file in one step when the file is created.\n\nThe *.tar* file format is used archive files and folders, it does not perform compression. Gzipping peforms the compression to the *.tar* file resulting in a file with the *.tar.gz* extension. Notably the *.gz* compression is highly efficient for large files. Take the *swda.tar.gz* file for example. It has a compressed file size of 4.6 MB, but when uncompressed it is 16.9 MB. This is a 73% reduction in file size.\n:::\n\nIn R, we can use the `download.file()` function from base R. The `download.file()` function minimally requires two arguments: `url` and `destfile`. These correspond to the file to download and the location where it is to be saved to disk. To break out the process a bit, I will assign the URL and destination file path to variables and then use the `download.file()` function to download the file.\n\n::: {#exm-ad-swda-download-file}\n\n```r\n# URL to SWDA corpus compressed file\nfile_url <-\n  \"https://catalog.ldc.upenn.edu/docs/LDC97S62/swb1_dialogact_annot.tar.gz\"\n\n# Relative path to project/data/original directory\nfile_path <- \"../data/original/swda.tar.gz\"\n\n# Download SWDA corpus compressed file\ndownload.file(url = file_url, destfile = file_path)\n```\n:::\n\n::: {.callout}\n**{{< fa exclamation-triangle >}} Warning**\n\nNote that the `file_path` variable in @exm-ad-swda-download-file is a relative path to the *data/original/* directory. This is because the *1_acquire_data.qmd* file that we are using for this code is located in the *process/* directory and the *data/* directory is a sibling directory to the *process/* directory.\n\nIt is also possible to use an absolute path to the *data/original/* directory. I will have more to say about the advantages and disadvantages of relative and absolute paths in reproducible research in [@sec-contribute-chapter].\n:::\n\nAs we can see looking at the directory structure, in @exm-ad-swda-download-location, the *swda.tar.zip* file has been added to the *data/original/* directory.\n\n::: {#exm-ad-swda-download-location}\nDownloaded SWDA corpus compressed file\n\n```bash\ndata/\n├── analysis/\n├── derived/\n└── original/\n    └── swda.tar.zip\n```\n:::\n\nOnce an compressed file is downloaded, however, the file needs to be 'decompressed' to reveal the directory structure and files. To decompress this *.tar.gz* file we use the `untar()` function with the arguments `tarfile` pointing to the *.tar.gz* file and `exdir` specifying the directory where we want the files to be extracted to. Again, I will assign the arguments to variables. Then we can decompress the file using the `untar()` function.\n\n::: {#exm-ad-swda-decompress-file}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Relative path to the compressed file\ntar_file <- \"../data/original/swda.tar.gz\"\n\n# Relative path to the directory to extract to\nextract_to_dir <- \"../data/original/swda/\"\n\n# Decompress .zip file and extract to our target directory\nuntar(tar_file, extract_to_dir)\n```\n:::\n\n:::\n\nThe directory structure of *data/* in @exm-ad-swda-decompress-location now shows the *swda.tar.gz* file and the *swda* directory that contains the decompressed directories and files.\n\n::: {#exm-ad-swda-decompress-location}\n```bash\ndata/\n├── analysis/\n├── derived/\n└── original/\n    ├── swda/\n    │   ├── README\n    │   ├── doc/\n    │   ├── sw00utt/\n    │   ├── sw01utt/\n    │   ├── sw02utt/\n    │   ├── sw03utt/\n    │   ├── sw04utt/\n    │   ├── sw05utt/\n    │   ├── sw06utt/\n    │   ├── sw07utt/\n    │   ├── sw08utt/\n    │   ├── sw09utt/\n    │   ├── sw10utt/\n    │   ├── sw11utt/\n    │   ├── sw12utt/\n    │   └── sw13utt/\n    └── swda.tar.gz\n```\n:::\n\nAt this point we have acquired the data programmatically and with this code as part of our workflow anyone could run this code and reproduce the same results.\n\nThe code as it is, however, is not ideally efficient. First, the *swda.tar.gz* file is not strictly needed after we decompress it and it occupies disk space, if we keep it. And second, each time we run this code the file will be downloaded from the remote server and overwrite the existing data. This leads to unnecessary data transfer and server traffic and will overwrite the data if it already exists in our project directory which could be problematic if the data changes on the remote server. Let's tackle each of these issues in turn.\n\nTo avoid writing the *swda.tar.gz* file to disk (long-term) we can use the `tempfile()` function to open a temporary holding space for the file in the computing environment. This space can then be used to store the file, decompress it, and then the temporary file will automatically be deleted. We assign the temporary space to an R object we will name `temp_file` with the `tempfile()` function. This object can now be used as the value of the argument `destfile` in the `download.file()` function.\n\n::: {#exm-ad-swda-temp-file}\n\n::: {.cell}\n\n```{.r .cell-code}\n# URL to SWDA corpus compressed file\nfile_url <-\n  \"https://catalog.ldc.upenn.edu/docs/LDC97S62/swb1_dialogact_annot.tar.gz\"\n\n# Create a temporary file space for our .tar.gz file\ntemp_file <- tempfile()\n\n# Download SWDA corpus compressed file\ndownload.file(file_url, temp_file)\n```\n:::\n\n:::\n\n::: {.callout}\n**{{< fa regular hand-point-up >}} Tip**\n\nIn @exm-ad-swda-temp-file, I've used the values stored in the objects `file_url` and `temp_file` in the `download.file()` function without specifying the argument names --only providing the names of the objects. R will assume that values of a function map to the ordering of the arguments. If your values do not map to ordering of the arguments you are required to specify the argument name and the value. To view the ordering of objects hit {{< kbd tab >}} after entering the function name or consult the function documentation by prefixing the function name with `?` and hitting {{< kbd enter >}}.\n:::\n\nAt this point our downloaded file is stored temporarily on disk and can be accessed and decompressed to our target directory using *temp_file* as the value for the argument `tarfile` from the `untar()` function. I've assigned our target directory path to `extract_to_dir` and used it as the value for the argument `exdir`.\n\n::: {#exm-ad-swda-untar-temp}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign our target directory to `extract_to_dir`\nextract_to_dir <- \"../data/original/swda/\"\n\n# Decompress .tar.gz file and extract to our target directory\nuntar(tarfile = temp_file, exdir = target_dir)\n```\n:::\n\n:::\n\nOur directory structure in @exm-ad-swda-untar-temp is the same as in @exm-ad-swda-decompress-location, minus the *swda.tar.gz* file.\n\nThe second issue I raised concerns the fact that running this code as part of our project will repeat the download each time our script is run. Since we would like to be good citizens and avoid unnecessary traffic on the web and avoid potential issues in overwriting data, it would be nice if our code checked to see if we already have the data on disk and if it exists, then skip the download, if not then download it.\n\nThe desired functionality we've described can be implemented using the `if()` function. The `if()` function is one of a class of functions known as control statements. **Control statments** allow us to control the flow of our code by evaluating logical statements and processing subsequent code based on the logical value it is passed as an argument.\n\nSo in this case we want to evaluate whether the data directory exists on disk. If it does then skip the download, if not, proceed with the download. In combination with `else` which provides the 'if not' part of the statement, we have the following logical flow in @exm-ad-if-dir-exists.\n\n::: {#exm-ad-if-dir-exists}\n```r\nif (DIRECTORY_EXISTS) {\n  # Do nothing\n} else {\n  # Download data\n}\n```\n:::\n\nWe can simplify this statement by using the `!` operator which negates the logical value of the statement it precedes. So if the directory exists, `!DIRECTORY_EXISTS` will return `FALSE` and if the directory does not exist, `!DIRECTORY_EXISTS` will return `TRUE`. In other words, if the directory does not exist, download the data. This is shown in @exm-ad-if-dir-exists-simplified.\n\n::: {#exm-ad-if-dir-exists-simplified}\n```r\nif (!DIRECTORY_EXISTS) {\n  # Download data\n}\n```\n:::\n\nNow, to determine if a directory exists in our project directory we will turn to the `fs` package [@R-fs]. The `fs` package provides a set of functions for interacting with the file system, including `dir_exists()`. `dir_exists()` takes a path to a directory as an argument and returns the logical value, `TRUE`, if that directory exists, and `FALSE` if it does not.\n\nWe can use this function to evaluate whether the directory exists and then use the `if()` function to process the subsequent code based on the logical flow we set out in @exm-ad-if-dir-exists-simplified. Applied to our project, the code will look like @exm-ad-swda-if-dir-exists.\n\n::: {#exm-ad-swda-if-dir-exists}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the `fs` package\nlibrary(fs)\n\n# URL to SWDA corpus compressed file\nfile_url <-\n  \"https://catalog.ldc.upenn.edu/docs/LDC97S62/swb1_dialogact_annot.tar.gz\"\n\n# Create a temporary file space for our .tar.gz file\ntemp_file <- tempfile()\n\n# Assign our target directory to `extract_to_dir`\nextract_to_dir <- \"../data/original/swda/\"\n\n# Check if our target directory exists\n# If it does not exist, download the file and extract it\nif (!dir_exists(extract_to_dir)) {\n  # Download SWDA corpus compressed file\n  download.file(file_url, temp_file)\n\n  # Decompress .tar.gz file and extract to our target directory\n  untar(tarfile = temp_file, exdir = extract_to_dir)\n}\n```\n:::\n\n:::\n\nThe code in @exm-ad-swda-if-dir-exists is added to the *1_acquire_data.qmd* file. When this file is run, the SWDA corpus data will be downloaded and extracted to our project directory. If the data already exists, the download will be skipped, just as we wanted.\n\nNow, before we move on, we need to make sure to document the process. Now that our Quarto document includes code we can review, explain, and comment this process. And, as always, create a data origin file as with the relevant information. The data origin file will be stored in the *data/original/* directory and the Quarto file will be stored in the *process/* directory.\n\nWe've leveraged R to automate the download and extraction of the data, depending on the existence of the data in our project directory. But you may be asking yourself, \"Can't I just navigate to the corpus page and download the data manually myself?\" The simple answer is, \"Yes, you can.\" The more nuanced answer is, \"Yes, but consider the trade-offs.\"\n\nThe following scenarios highlight the some advantages to automating the process. If you are acquiring data from multiple files, it can become tedious to document the manual process for each file such that it is reproducible. It's possible, but it's error prone.\n\nNow, if you are collaborating with others, you will want to share this data with them. It is very common to find data that has limited restrictions for use in academic projects, but the most common limitation is redistribution. This means that you can use the data for your own research, but you cannot share it with others. If you plan on publishing your project to a code repository to share the data as part of your reproducible project, you would be violating the terms of use for the data. By including the programmatic download in your project, you can ensure that your collaborators can easily and effectively acquire the data themselves and that you are not violating the terms of use.\n\n## APIs {#sec-apis}\n\nA convenient alternative method for acquiring data in R is through package interfaces to web services. These interfaces are built using R code to make connections with resources on the web through **Application Programming Interfaces** (APIs). Websites such as Project Gutenberg, Twitter, Reddit, and many others provide APIs to allow access to their data under certain conditions, some more limiting for data collection than others. Programmers (like you!) in the R community take up the task of wrapping calls to an API with R code to make accessing that data from R convenient, and of course reproducible.\n\n::: {.callout}\n**{{< fa medal >}} Dive deeper**\n\nMany, many web services provide API access. These APIs span all kinds of data, from text to images to video to audio. Visit the [Public APIs website](https://publicapis.io/) to explore the diversity of APIs available.\n\nROpenSci maintains a curated list of R packages that provide access to data from web services. Visit the [ROpenSci website](https://ropensci.org/packages/data-access/) to explore the packages available.\n:::\n\n<!-- APIs of interest to linguists -->\n\nIn addition to popular public APIs, there are also APIs that provide access to repositories and databases which are of particular interest to linguists. For example, [Wordbank](http://wordbank.stanford.edu/) provides access to a large collection of child language corpora through the `wordbankr` package [@R-wordbankr], and [Glottolog](https://glottolog.org/), [World Atlas of Language Structures](https://wals.info/) (WALS), and [PHOIBLE](https://phoible.org/) provide access to large collections of language metadata that can be accessed through the `lingtypology` package [@R-lingtypology].\n\n<!-- TalkBank -->\n\nLet's work with an R package that provides access to the [TalkBank](https://talkbank.org/) database. The TalkBank project [@Macwhinney2003] contains a large collection of spoken language corpora from various contexts: conversation, child language, multilinguals, *etc*. Resource information, web interfaces, and links to download data in various formats can be found by perusing individual resources linked from the main page. However, the `TBDBr` package [@R-TBDBr] provides convenient access to corpora using R once a corpus resource is identified.\n\n<!-- CABNC -->\n\nThe CABNC [@Albert2015] contains the [demographically sampled portion](http://www.natcorp.ox.ac.uk/docs/URG/BNCdes.html#body.1_div.1_div.5_div.1) of the spoken portion of the British National Corpus (BNC) [@Leech1992].\n\nUseful for a study aiming to research spoken British English, either in isoloation or in comparison to American English (SWDA).\n\nFirst, we need to install and load the `TBDBr` package. @exm-ad-load-pacman.\n\n::: {#exm-ad-load-pacman}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the TBDBr package\nlibrary(TBDBr)\n```\n:::\n\n:::\n\n<!-- TBDBr functions -->\n\nThe `TBDBr` package provides a set of common `get*()` functions for acquiring data from the TalkBank corpus resources. These include:\n\n- `getParticipants()`\n- `getTranscripts()`\n- `getTokens()`\n- `getTokenTypes()`\n- `getUtterances()`\n\n::: {.callout}\n**{{< fa regular hand-point-up >}} Tip**\nList functions and arguments\n\nFor any package loaded in your R session, you can list all of its functions and datasets using the `ls()` function. For example, `ls(\"package:TBDBr\")` will list all of the functions and datasets in the `TBDBr` package.\n\nTo view all of the arguments for a function, use the `args()` function. For example, `args(getUtterances)` will list all of the arguments for the `getUtterances()` function.\n:::\n\nFor each of these function the first argument is `corpusName`, which is the name of the corpus resource as it appears in the TalkBank database. The second argument is `corpora`, which takes a character vector describing the path to the data. For the CABNC, these arguments are `\"ca\"` and `c(\"ca\", \"CABNC\")` respectively. To determine these values, TBDBr provides the `getLegalValues()` interactive function which allows you to interactively select the repository name, corpus name, and transcript name (if necessary).\n\nAnother important aspect of these function is that they return data frame objects. Since we are accessing data that is in a structured database, this makes sense. However, we should always check the documentation for the object type that is returned by function to be aware of how to work with the data.\n\nLet's start by retrieving the utterance data for the CABNC and preview the data frame it returns using `glimpse()`.\n\n::: {#exm-ad-get-utterances}\n```r\n# Set corpus_name and corpus_path\ncorpus_name <- \"ca\"\ncorpus_path <- c(\"ca\", \"CABNC\")\n\n# Get utterance data\nutterances <-\n  getUtterances(\n    corpusName = corpus_name,\n    corpora = corpus_path\n    )\n\n# Preview the data\nglimpse(utterances)\n```\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n> Rows: 235,901\n> Columns: 10\n> $ filename  <list> \"KB0RE000\", \"KB0RE000\", \"KB0RE000\", \"KB0RE000\", \"KB0RE000\",…\n> $ path      <list> \"ca/CABNC/KB0/KB0RE000\", \"ca/CABNC/KB0/KB0RE000\", \"ca/CABNC…\n> $ utt_num   <list> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n> $ who       <list> \"PS002\", \"PS006\", \"PS002\", \"PS006\", \"PS002\", \"PS006\", \"PS00…\n> $ role      <list> \"Unidentified\", \"Unidentified\", \"Unidentified\", \"Unidentifi…\n> $ postcodes <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NU…\n> $ gems      <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NU…\n> $ utterance <list> \"You enjoyed yourself in America\", \"Eh\", \"did you\", \"Oh I c…\n> $ startTime <list> \"0.208\", \"2.656\", \"2.896\", \"3.328\", \"5.088\", \"6.208\", \"8.32…\n> $ endTime   <list> \"2.672\", \"2.896\", \"3.328\", \"5.264\", \"6.016\", \"8.496\", \"9.31…\n```\n\n\n:::\n:::\n\n:::\n\n<!-- Inspecting data  -->\n\nInspecting the output from @exm-ad-get-utterances, we see that the data frame contains 235,901 observations and 10 variables.\n\nThe summary provided by `glimpse()` also provides other useful information. First, we see the data type of each variable. Interestingly, the data type for each variable in the data frame is a list object. Being that a list is two-dimensional data type, like a data frame, we have two-dimensional data inside two-dimensional data. This is known as a **nested structure**. We will work with nested structures in more depth later, but for now it will suffice to say that we would like to 'unnest' these lists and reveal the list-contained vector types at the data frame level.\n\nTo do this we will pass the `utterances` data frame to the, appropriately named, `unnest()` function from the `tidyr` package [@R-tidyr]. `unnest()` takes a data frame and a vector of variable names to unnest, `cols = c()`. To unnest all variables, we will use the `everything()` function from `dplyr` to select all variables at once. We will use the result to overwrite the `utterances` object with the unnested data frame.\n\n::: {#exm-ad-unnest}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Unnest the data frame\nutterances <-\n  utterances |>\n  unnest(cols = everything())\n\n# Preview the data\nglimpse(utterances)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n> Rows: 235,901\n> Columns: 10\n> $ filename  <chr> \"KB0RE000\", \"KB0RE000\", \"KB0RE000\", \"KB0RE000\", \"KB0RE000\", …\n> $ path      <chr> \"ca/CABNC/KB0/KB0RE000\", \"ca/CABNC/KB0/KB0RE000\", \"ca/CABNC/…\n> $ utt_num   <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n> $ who       <chr> \"PS002\", \"PS006\", \"PS002\", \"PS006\", \"PS002\", \"PS006\", \"PS002…\n> $ role      <chr> \"Unidentified\", \"Unidentified\", \"Unidentified\", \"Unidentifie…\n> $ postcodes <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n> $ gems      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n> $ utterance <chr> \"You enjoyed yourself in America\", \"Eh\", \"did you\", \"Oh I co…\n> $ startTime <chr> \"0.208\", \"2.656\", \"2.896\", \"3.328\", \"5.088\", \"6.208\", \"8.32\"…\n> $ endTime   <chr> \"2.672\", \"2.896\", \"3.328\", \"5.264\", \"6.016\", \"8.496\", \"9.312…\n```\n\n\n:::\n:::\n\n:::\n\nThe output from @exm-ad-unnest shows that the variables are now one-dimensional vector types.\n\nReturning to the information about our data frame from `glimpse()`, the second thing to notice is we get a short preview of the values for each variable. There are a couple things we can gleen from this. One is that we can confirm or clarify the meaning of the variable names by looking at the values. The other thing to consider is whether the values show any patterns that may be worthy of more scrutiny. For example, various variables appear to contain the same values for each observation. For a variable like `filename`, this is expected as the first values likely correspond to the same file. However, for the variables `postcodes` and `gems` the values are 'NA'. This suggests that these variables may not contain any useful information and we may want to remove them later.\n\n<!-- Writing data -->\n\nFor now, however, we want to acquire and store the data in its original form (or as closely as possible). So now, we have acquired the utterances data and have it in our R session as a data frame. To store this data in a file, we will first need to consider the file format. Data frames are tabular, so that gives us a few options.\n\nSince we are working in R, we could store this data as an R object, in the form of an RDS file. An RDS file is a binary file that can be read back into R as an R object. This is a good option if we want to store the data for use in R, but not if we want to share the data with others or use it in other software. Another option is to store the data as a spreadsheet file, such as XSLX (MS Excel). This may make viewing and editing the contents more convenient, but it depends on the software available to you and others. A third, more viable option, is to store the data as a CSV file. CSV files are plain text files that can be read and written by most software. This makes CSV files one of the most popular for sharing tablular data. For this reason, we will store the data as a CSV file.\n\nThe `readr` package provides the `write_csv()` function for writing data frames to CSV files. The first argument is the data frame to write, and the second argument is the path to the file to write. Note, however, that the directories in the path we specify need to exist. If they do not, we will get an error.\n\nIn this case, I would like to write the file *utterances.csv* to the *../data/original/cabnc/* directory. The original project structure does not contain a *cabnc/* directory, so I need to create one. To do this, I will use `dir_create()` from the `fs` package.\n\n::: {#exm-ad-write-csv}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the target directory\ndir_create(\"../data/original/cabnc/\")\n\n# Write the data frame to a CSV file\nwrite_csv(utterances, \"../data/original/cabnc/utterances.csv\")\n```\n:::\n\n:::\n\nChaining the steps covered in Examples [-@exm-ad-get-utterances], [-@exm-ad-unnest], and [-@exm-ad-write-csv], we have a succinct and legible code to acquire, adjust, and write utterances from the CABNC in @exm-ad-get-unnest-write-csv.\n\n::: {#exm-ad-get-unnest-write-csv}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set corpus_name and corpus_path\ncorpus_name <- \"ca\"\ncorpus_path <- c(\"ca\", \"CABNC\")\n\n# Create the target directory\ndir_create(\"../data/original/cabnc/\")\n\n# Get utterance data\ngetUtterances(\n  corpusName = corpus_name,\n  corpora = corpus_path\n) |>\n  unnest(cols = everything()) |>\n  write_csv(\"../data/original/cabnc/utterances.csv\")\n```\n:::\n\n:::\n\n<!-- Function -->\n\nIf our goal is just to acquire utterances, then we are done acquiring data and we move on to the next step. However, if we want to acquire other datasets from the CABNC, say participants, tokens, *etc.*, then we can either repeat the steps in @exm-ad-get-unnest-write-csv for each data type, or we can write a function to do this for us!\n\nA function serves us to make our code more legible and reusable for the CABNC, and since the TalkBank data is structured similarly across corpora, we can also use the function to acquire data from other corpora, if need be.\n\nTo write a function, we need to consider the following:\n\n1. What is the name of the function?\n2. What arguments does the function take?\n3. What functionality does the function provide?\n4. Does the function have optional arguments?\n5. How does the function return the results?\n\nTaking each in turn, the name of the function should be descriptive of what the function does. In this case, we are acquiring and writing data from Talkbank corpora. A possible name is `get_talkbank_data()`. The required arguments of the the `get*()` functions will definitely figure in our function. In addition, we will need to specify the path to the directory to write the data. With these considerations, we can write the function signature in @exm-ad-get-talkbank-data-1.\n\n::: {#exm-ad-get-talkbank-data-1}\n\n::: {.cell}\n\n```{.r .cell-code}\nget_talkbank_data <- function(corpus_name, corpus_path, target_dir) {\n  # ...\n}\n```\n:::\n\n:::\n\nThe next thing to consider is what functionality the function provides. In this case, we want to acquire and write data from Talkbank corpora. We can start by leveraging the code steps in @exm-ad-get-unnest-write-csv, making some adjustments to the code replacing the hard-coded values with the function arguments and adding code to create the target file name based on the `target_dir` argument.\n\n::: {#exm-ad-get-talkbank-data-2}\n\n::: {.cell}\n\n```{.r .cell-code}\nget_talkbank_data <- function(corpus_name, corpus_path, target_dir) {\n\n  # Create the target directory\n  dir_create(target_dir)\n\n  # Set up file path name\n  utterances_file  <- path(target_dir, \"utterances.csv\")\n\n  # Acquire data and write to file\n  getUtterances(corpusName = corpus_name, corpora = corpus_path) |>\n    unnest(cols = everything()) |>\n    write_csv(utterances_file)\n}\n```\n:::\n\n:::\n\nBefore we address the obvious feature missing, which is the fact that this function in @exm-ad-get-talkbank-data-2 only acquires and writes data for utterances, let's consider some functionality which would make this function more user-friendly.\n\nWhat if the data is already acquired? Do we want to overwrite it, or should the function skip the process for files that already exist? By skipping the process, we can save time and computing resources. If the files are periodically updated, then we might want to overwrite existing files.\n\nTo achieve this functionality we will use an `if()` statement to check if the file exists. If it does, then we will skip the process. If it does not, then we will acquire and write the data.\n\n::: {#exm-ad-get-talkbank-data-3}\n\n::: {.cell}\n\n```{.r .cell-code}\nget_talkbank_data <- function(corpus_name, corpus_path, target_dir) {\n\n  # Create the target directory\n  dir_create(target_dir)\n\n  # Set up file path name\n  utterances_file  <- path(target_dir, \"utterances.csv\")\n\n  # If the file does not exist, then...\n  # Acquire data and write to file\n  if(!file_exists(utterances_file)) {\n    getUtterances(corpusName = corpus_name, corpora = corpus_path) |>\n      unnest(cols = everything()) |>\n      write_csv(utterances_file)\n  }\n}\n```\n:::\n\n:::\n\nWe can also add functionality to @exm-ad-get-talkbank-data-3 to force overwrite existing files, if need be. To do this, we will add an optional argument to the function, `force`, which will be a logical value. We will set the default to `force = FALSE` to preserve the existing functionality. If `force = TRUE`, then we will overwrite existing files. Then we add another condition to the `if()` statement to check if `force = TRUE`. If it is, then we will overwrite existing files.\n\n::: {#exm-ad-get-talkbank-data-4}\n\n::: {.cell}\n\n```{.r .cell-code}\nget_talkbank_data <- function(corpus_name, corpus_path, target_dir, force = FALSE) {\n\n  # Create the target directory\n  dir_create(target_dir)\n\n  # Set up file path name\n  utterances_file  <- path(target_dir, \"utterances.csv\")\n\n  # If the file does not exist, then...\n  # Acquire data and write to file\n  if(!file_exists(utterances_file) | force) {\n    getUtterances(corpusName = corpus_name, corpora = corpus_path) |>\n      unnest(cols = everything()) |>\n      write_csv(utterances_file)\n  }\n}\n```\n:::\n\n:::\n\nFrom this point, we add the functionality to acquire and write the other data available from Talkbank corpora, such as participants, tokens, *etc.* This involves adding additional file path names and `if()` statements to check if the files exist surrounding the processing steps to @exm-ad-get-talkbank-data-4. It may be helpful to perform other input checks, print messages, *etc.* for functions that we plan to share with others. I will leave these enhancements as an exercise for the reader.\n\n<!-- Function location -->\n\nBefore we leave the topic of functions, let's consider where to put functions after we write them. Here are a few options:\n\n1. In the same script as the code that uses the function.\n2. In a separate script, such as *functions.R*.\n3. In a package, which is loaded by the script that uses the function.\n\nThe general heuristic for choosing where to put functions is to put them in the same script as the code that uses them if the function is only used in that script. If the function is used in multiple scripts or the function or number of functions clutters the readability of the code, then put it in a separate script. If the function is used in multiple projects, then put it in an R package.\n\n::: {.callout}\n**{{< fa medal >}} Dive deeper**\n\nIf you are interested in learning more about writing functions, check out the [Writing Functions chapter](https://r4ds.had.co.nz/functions.html) in the [R for Data Science](https://r4ds.had.co.nz/) book.\n\nIf you find yourself writing functions that are useful for multiple projects, you may want to consider creating an R package. R packages are a great way to share your code with others. If you are interested in learning more about creating R packages, check out the [R Packages book](https://r-pkgs.org/) by Hadley Wickham and Jenny Bryan.\n:::\n\nIn this case, we will put the function in a separate file, *functions.R*, in the same directory as the other process files as in @exm-ad-functions-r.\n\n::: {#exm-ad-functions-r}\n```bash\nprocess/\n  │   ├── 1_acquire_data.qmd\n  │   ├── ...\n  │   └── functions.R\n```\n:::\n\n::: {.callout}\n**{{< fa regular hand-point-up >}} Tip**\n\nNote that that the *functions.R* file is an R script, not a Quarto document. Therefore code blocks that are used in *.qmd* files are not used, only the R code and code comments.\n:::\n\nTo include this, or other functions in in the R session of the process file that uses them, use the `source()` function, as seen in @exm-ad-source-functions.\n\n::: {#exm-ad-source-functions}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Source functions\nsource(\"functions.R\")\n```\n:::\n\n:::\n\nIt is common to source functions at the top of the process file as part of the package setup.\n\nGiven the utility of this function to my projects and potentially others', I've included the `get_talkbank_data()` function in the `qtkit` package. You can view the source code by calling the function without parentheses `()`, or on the `qtkit` GitHub repository.\n\nAfter running the `get_talkbank_data()` function, we can see that the data has been acquired and written to the *data/original/cabnc/* directory.\n\n::: {#exm-ad-functions-r}\n```bash\ndata/\n├── analysis\n├── derived\n└── original\n    └── cabnc\n        ├── participants.csv\n        ├── token_types.csv\n        ├── tokens.csv\n        ├── transcripts.csv\n        └── utterances.csv\n```\n:::\n\n<!-- Note on documentation -->\n\nAdd comments to your code in *1-acquire-data.qmd* and create and complete the data origin documentation file for this resource, and the acquisition is complete.\n\n## Activities {.unnumbered}\n\nBuilding on the activities in the previous chapter, these activities will focus on the implementation of the data acquisition process. Key programming concepts include writing custom functions, control statements, and applying functions iteratively will be covered in addition to packages and functions which provide access to data from the web.\n\n::: {.callout}\n**{{< fa regular file-code >}} Recipe**\n\n**What**: [Collecting and documenting data](https://qtalr.github.io/resources/recipes/recipe-05/)\\\n**How**: Read Recipe 5, complete comprehension check, and prepare for Lab 5.\\\n**Why**: To refine programming strategies introduced in the lesson for controlling program flow and making code more reusable in the service of programmatically acquiring and documenting data.\n:::\n\n::: {.callout}\n**{{< fa flask >}} Lab**\n\n**What**: [Harvesting research data](https://github.com/qtalr/lab-05)\\\n**How**: Fork, clone, and complete the steps in Lab 5.\\\n**Why**: To investigate data sources, plan data collection strategies, and apply skills and knowledge to use R to collect and document data.\n:::\n\n## Summary {.unnumbered}\n\nIn this chapter, we have covered a lot of ground. On the surface we have discussed a few methods for acquiring corpus data for use in text analysis. In the process we have delved into various aspects of the R programming language. Some key concepts include writing control statements and custom functions. We have also considered topics that are more general in nature and concern interacting with data found on the internet.\n\nEach of these methods should be approached in a way that is transparent to the researcher and to would-be collaborators and the general research community. For this reason the documentation of the steps taken to acquire data are key both in the code and in human-facing documentation.\n\nAt this point you have both a bird’s eye view of the data available on the web and strategies on how to access a great majority of it. It is now time to turn to the next step in our data analysis project: data curation. In the next chapter, I will cover how to wrangle your raw data into a tidy dataset.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
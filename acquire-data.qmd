---
execute: 
  echo: true
---

# Acquire data {#sec-acquire-data}

```{r}
#| label: setup-options
#| child: "_common.qmd"
#| cache: false
```

::: {.callout-caution title="Caution"}
Under development.
:::


<!--

Content:

- [x] Figure out what do do with Twitter API: can we still stream? Or is `rtoot` for Mastodon a better option at this point? Remove.
- [x] Figure out what to do with the web scraping section: Gutenberg Project (single page), SPLLOC (multiple pages), Maybe the American Presidency Project?
  - [x] Single page SOTU here (Federalist Papers LOC on Recipe)

Exercises:

- [ ] Add concept questions to the Activities
- [ ] Add exercises to the Activities
- [ ] Add thought questions/ case studies to prose sections

Formatting:

-->

> The scariest moment is always just before you start.
>
> ―-- Stephen King

::: {.callout}
**{{< fa regular list-alt >}} Outcomes**

<!-- Remember and understand verbs: https://tips.uark.edu/blooms-taxonomy-verb-chart/ -->

<!-- [x] change to outcomes/ update for new chapter content -->

- Identify common strategies for acquiring corpus data.
- Describe how to organize and document data acquisition to support reproducibility.
- Recall R programming concepts and strategies relevant to acquiring data.
:::

<!--  
Programming topics:
- control statements
  - `if` statements
  - `message` function
  - `stop` function
- custom functions
  - required and optional arguments
  - argument checks
  - `return` function
  - `invisible` function
-->

<!--  
- [x] Consider how to document the changes to the scaffolding.
  - [x] Use R or qmd?
    - Quarto make more sense for documentation, but the rendered HTML appears side-by-side with the script files. This looks messy. Or I don't show the HTML output. Then, later in the book (Chapter 13: collaboration), I introduce how to tie the HTML output to a full website with `_site.yml`? 

project/
├── _main.R
├── data/
│   ├── analysis/
│   ├── derived/
│   └── original/
├── output/
│   ├── figures/
│   ├── reports/
│   ├── results/
│   └── tables/
├── README
└── code/

-->


```{r}
#| label: acquire-data-packages
#| echo: false

pacman::p_load(tidyverse) # for the book
```

As we start down the path to executing our research blueprint, our first step is to acquire the primary data that will be employed in the project. This chapter covers three widely-used strategies for acquiring corpus data: downloads, APIs (Application Programming Interfaces), and web scraping. We get started with the most straighforward approaches from a conceptual standpoint, gradually escalating to more nuanced methods. We will encounter various file formats and folder structures in the process and we will address how to effectively organize our data for subsequent processing. Crucial to our efforts is the process of documenting our data. We will learn to provide data origin information to ensure key characteristics of the data and its source are documented. Along the way we will explore R coding concepts including control statements and custom functions relevant to the task of acquiring data. By the end of this chapter, you will not only be adept at acquiring data from diverse sources but also capable of documenting it comprehensively, enabling you to replicate the process in the future.

::: {.callout}
**{{< fa terminal >}} Swirl lesson**

<!-- Remember and understand verbs: https://tips.uark.edu/blooms-taxonomy-verb-chart/ -->

**What**: [Control Statements, Custom Functions](https://github.com/qtalr/lessons)\
**How**: In the R Console pane load `swirl`, run `swirl()`, and follow prompts to select the lesson.\
**Why**: To recognize the logic behind code that can make dynamic choices and to recall how functions serve to produce efficient, reusable, and more legible code.
:::

## Downloads

The most common and straightforward method for acquiring corpus data is through direct downloads. In a nutshell, this method involves navigating to a website, locating the data, and downloading it to your computing environment. In some cases access to the data requires manual intervention and in others the process can be implemented programmatically. The data may be contained in a single file or multiple files. The files may be compressed or uncompressed. The data may be hierarchically organized or not. Each resource will have its own unique characteristics that will influence the process of acquiring the data. In this section we will work through a few examples to demonstrate the general process of acquiring data through downloads. 

### Manual

In contrast to the other data acquisition methods we will cover in this chapter, **manual downloads** require human intervention. This means that manual downloads are non-reproducible in a strict sense and require that we keep track of and document our procedure. It is a very common for research projects to acquire data through manual downloads as many data resources require some legwork before they are accessible for downloading. These can be resources that require institutional or private licensing and fees ([Language Data Consortium](https://www.ldc.upenn.edu/), [International Corpus of English](http://ice-corpora.net/ice/), [BYU Corpora](https://www.corpusdata.org/), *etc.*), require authorization/ registration ([The Language Archive](https://archive.mpi.nl/tla/), [COW Corpora](https://www.webcorpora.org/), *etc.*), and/ or are only accessible via resource search interfaces ([Corpus of Spanish in Southern Arizona](https://cesa.arizona.edu/), [Corpus Escrito del Español como L2 (CEDEL2)](http://cedel2.learnercorpora.com/), *etc.*).

Let's take a look at how to acquire data from a resource that requires manual intervention. The resource we will use is the [Corpus Escrito del Español como L2 (CEDEL2)](http://cedel2.learnercorpora.com/) [@Lozano2009], a corpus of Spanish learner writing. It includes L2 writing from students with a variety of L1 backgrounds. For comparative puposes it also includes native writing for Spanish, English, and several other languages. 

The CEDEL2 corpus is a freely available resource, but to access the data you must first use a search interface to select the relevant characteristics of the data of interest. Following the search/ download link you can find a search interface that allows the user to select the subcorpus and filter the results by a set of attributes, seen in @fig-ad-cedel2-search.

```{r}
#| label: fig-ad-cedel2-search
#| fig-cap: 'Search and download interface for the CEDEL2 Corpus'
#| out.width: '100%'
#| echo: false

knitr::include_graphics("figures/acquire-data/ad-cedel2-search.png")
```

For this example let's assume that we want to acquire data to use in a study comparing the use of the Spanish preterite and imperfect past tense aspect in written texts by English L1 learners of Spanish to native Spanish speakers. To acquire data for such a project, we will first select the subcorpus "Learners of L2 Spanish". We will set the results to provide full texts and filter the results to "L1 English - L2 Spanish". Additionally, we will set the medium to "Written". This will provide us with a set of texts for the L2 learners that we can use for our study. The search parameters and results are shown in @fig-ad-cedel2-results.

```{r}
#| label: fig-ad-cedel2-results
#| fig-cap: "Search results for the CEDEL2 Corpus"
#| out.width: '100%'
#| echo: false

knitr::include_graphics("figures/acquire-data/ad-cedel2-results.png")
```

The 'Download' link now appears for this search criteria. Following this link will provide the user a form to fill out. This particular resource allows for access to different formats to download (Texts only, Texts with metadata, CSV (Excel), CSV (Others)). I will select the 'CSV (Others)' option so that the data is structured for easier processing downstream when we work to curate the data in our next processing step. Then I will choose to save the CSV in the *data/original/* directory of my project and create a sub-directory named *cedel2/*, as seen in @exm-ad-cedel2-learners-download.

::: {#exm-ad-cedel2-learners-download}
Download CEDEL2 L2 Spanish Learners data

```bash
data/
├── analysis/
├── derived/
└── original/
    └── cedel2/
       └── cedel2-l1-english-learners.csv
```
:::

Note that the file is named *cedel2-l1-english-learners.csv* to reflect the search criteria used to acquire the data. In combination with other data documentation, this will help us to maintain transparency.

Now, after downloading the L2 learner and the native speaker data into the appropriate directory, we move on to the next processing step, right? Not so fast! Imagine we are working on a project with a collaborator. How will they know where the data came from? What if we need to come back to this data in the future? How will we know what characteristics we used to filter the data? The directory and filenames may not be enough. To address these questions we need to document the origin of the data, and in the case of data acquired through manual downloads, we need to document the procedures we took to acquire the data to the best of our ability.

As discussed in @sec-ud-data-origin, all acquired data should be accompanied by a data origin file. The majority of this information can typically be identified on the resource's website and/ or the resource's documentation. In the case of the CEDEL2 corpus, the corpus homepage provides most of the information we need. 

Structurally, data documentation files should be stored close to the data they describe. So for our data origin file this means adding it to the *data/original/* directory. Naming the file in a transparent way is also important. I've named the file *cedel2_do.csv* to reflect the name of the corpus, the meaning of the file as data origin with *_do*, and the file extension *.csv* to reflect the file format. CSV files reflect tabular content. It is not required that data origin files are tabular, but it makes it easier to read and display them in literate programming documents. 

::: {.callout}
**{{< fa regular hand-point-up >}} Tip**

There are many ways to create and edit CSV files. You can use a spreadsheet program like MS Excel or Google Sheets, a text editor like Notepad or TextEdit, or a code editor like RStudio or VS Code. The `qtalrkit` package provides a convenient function, `create_data_origin()` to create a CSV file with the data origin boilerplate structure. This CSV file then can be edited to add the relevant information in any of the above mentioned programs. 

Using a spreadsheet program is the easiest method for editing tabular data. The key is to save the file as a CSV file, and not as an Excel file, to maintain our adherence to the principle of using open formats for reproducible research.
:::

In @tbl-ad-cedel2-do, I've created a data origin file for the CEDEL2 corpus.

```{r}
#| label: tbl-ad-cedel2-do
#| tbl-cap: "Data origin file for the CEDEL2 corpus"
#| tbl-colwidths: [25, 75]
#| echo: false

# Display CEDEL2 data origin file for documentation
read_csv("data/acquire-data/ad-cedel2_do.csv") |> 
  knitr::kable(booktabs = TRUE)
```

Given this is a manual download we also need to document the procedure used to retrieve the data in prose. The script in the *code/* directory that is typically used to acquire the data is not used to programmatically retrieve data in this case. However, to keep things predictable we will use this file to document the download procedure. I've created a Quarto file named *1_acquire_data.qmd* in the *code/* directory of my project. 

A glimpse at the directory structure of the project at this point is seen in @exm-ad-cedel2-structure.

::: {#exm-ad-cedel2-structure}
Project structure for the CEDEL2 corpus data acquisition 

```bash
project/
├── code/
│   ├── 1_acquire_data.qmd
│   └── ...
├── data/
│   ├── analysis/
│   ├── derived/
│   └── original/
│       ├── cedel2_do.csv
│       └── cedel2/
|           ├── cedel2-l1-english-learners.csv
|           └── cedel2-native-spanish-speakers.csv
├── output/
│   ├── figures/
│   ├── reports/
│   ├── results/
│   └── tables/
├── README.md
└── _main.R
```
:::

In the *1_acquire_data.qmd* file I've added example sections to display the data origin CSV file as a table and to document the data download procedures, as seen in @lst-ad-cedel2-acquire-data-qmd.


````{#lst-ad-cedel2-acquire-data-qmd .quarto filename="1-acquire-data.qmd" lst-cap="Acquire data file"}
---
title: "Acquire data"
format: html
---

## Overview

The goal of this script is to acquire and document data for this project from the CEDEL2 corpus. The acquired data will be stored in the `data/original/cedel2/` directory.

## Data origin

To document the origin of the data we created a file named `cedel2_do.csv` in the `data/original/` directory. This file contains the following information: 

```{{r}}
#| label: tbl-cedel2-data-origin
#| tbl-cap: "Data origin file for the CEDEL2 corpus"
#| echo: false

# Display data origin file
readr::read_csv("../data/original/cedel2_do.csv") |> 
  knitr::kable()
```

## Download procedures

The process to acquire data from the CEDEL2 corpus involved the following steps:

L2 Spanish Learners:

1. Navigate to the [CEDEL2 Corpus](http://cedel2.learnercorpora.com/search) search interface
2. Select the subcorpus "Learners of L2 Spanish"
3. Set the results to provide full texts
4. Filter the results to "L1 English - L2 Spanish"
5. Set the medium to "Written"
6. Download the data in CSV format
7. Save the CSV file to the `data/original/cedel2/` directory as `cedel2-l1-english-learners.csv`

Spanish natives: 

````

The output from *1_acquire_data.qmd* will contain a table displaying the data origin file and a prose section documenting the data acquisition process. This will provide a transparent record of the data acquisition process for future reference.

Manually downloading other resources will inevitably include unique processes for obtaining the data, but in the end the data should be archived in the research structure in the *data/original/* directory and documented in the appropriate places. The acquired data is treated as 'read-only', meaning it is not modified in any way. This gives us a transparent starting point for subsequent steps in the data preparation process.

### Programmatic

<!-- [ ] Update to SWDA information and download URL -->

There are many resources that provide corpus data that is directly accessible for which programmatic downloads can be applied. A **programmatic download** is a download in which the process can be automated through code. Thus, this is a reproducible process. The data can be acquired by anyone with access to the necessary code. 

In this case, and subsquent data acquisition procedures in this chapter, we use the *1_acquire_data.qmd* Quarto file to its full potential intermingling prose, code, and code comments to execute and document the download procedure. In @lst-ad-swda-acquire-data-qmd, I've added example sections to display example boilerplate structure for a programmatic data acquisition and documentation.

<!-- Acquire data script -->

````{#lst-ad-swda-acquire-data-qmd .quarto filename="1-acquire-data.qmd" lst-cap="Acquire data file"}
---
title: "Acquire data"
format: html
---

## Overview

The goal of this script is to ...

## Data origin

To document the origin of the data we created a file named ...

## Download procedures

```{{r}}
#| label: setup

# Load libraries
library(tidyverse)
```

```{{r}}
# .. additional code here to acquire data ...
```

... and so on

````

To illustrate how this works to conduct a programmatic download, we will work with the Switchboard Dialog Act Corpus (SWDA) [@SWDA2008]. The version that we will use is found on the Linguistic Data Consortium under the [Switchboard-1 Release 2 Corpus](https://catalog.ldc.upenn.edu/LDC97S62). The corpus and related documentation are linked on the catalog page <https://catalog.ldc.upenn.edu/docs/LDC97S62/>. 

From the documentation we learn that the corpus contains transcripts for 1155 5-minute two-way telephone conversations among English speakers for all areas of the United States. The speakers were given a topic to discuss and the conversations were recorded. The corpus metadata and annotations for sociolinguistic and discourse features. 

The SWDA was referred to in [@sec-aa-infer] to support our toy hypothesis that men and women differ in the frequency of the use of questions in spontaneous conversations. This corpus, as you can image, could support a wide range of interesting reseach questions. Let's assume we are following research conducted by @Tottie2011 to explore the use of filled pauses such as "um" and "uh" and traditional sociolinguistic variables such as sex, age, and education in spontaneous speech by American English speakers.

With this goal in mind, let's get started writing the code to download and organize the data in our project directory. First we need to identify the URL (Uniform Resource Locator) for the data that we want to download. More often than not this file will be some type of compressed archive file with an extension such as *.zip* (Zipped file), *.tar* (Tarball file), or *tar.gz* (Gzipped tarball file), which is the case for the SWDA corpus. Compressed files make downloading multiple files easy by grouping files and directories into one file. 

::: {.callout}
**{{< fa regular lightbulb >}} Consider this**

You may be wondering what the difference betwen *.zip*, *.tar*, and *.tar.gz* files are. The *.zip* file format is the most common. It groups file and directories into one file (archives) and compresses them to reduce the size of the file in one step when the file is created.

The *.tar* file format is used archive files and folders, it does not perform compression. Gzipping peforms the compression to the *.tar* file resulting in a file with the *.tar.gz* extension. Notably the *.gz* compression is highly efficient for large files. Take the *swda.tar.gz* file for example. It has a compressed file size of 4.6 MB, but when uncompressed it is 16.9 MB. This is a 73% reduction in file size. 
:::

In R we can use the `download.file()` function from base R. The `download.file()` function minimally requires two arguments: `url` and `destfile`. These correspond to the file to download and the location where it is to be saved to disk. To break out the process a bit, I will assign the URL and destination file path to variables and then use the `download.file()` function to download the file.

::: {#exm-ad-swda-download-file}

```{r}
#| label: ad-swda-download-file
#| eval: false

# URL to SWDA corpus compressed file
file_url <- 
  "https://catalog.ldc.upenn.edu/docs/LDC97S62/swb1_dialogact_annot.tar.gz"

# Relative path to project/data/original directory
file_path <- "../data/original/swda.tar.gz"

# Download SWDA corpus compressed file
download.file(url = file_url, destfile = file_path)
```
:::

::: {.callout}
**{{< fa exclamation-triangle >}} Warning**

Note that the `file_path` variable in @exm-ad-swda-download-file is a relative path to the *data/original/* directory. This is because the *1_acquire_data.qmd* file that we are using for this code is located in the *code/* directory and the *data/* directory is a sibling directory to the *code/* directory.

It is also possible to use an absolute path to the *data/original/* directory. I will have more to say about the advantages and disadvantages of relative and absolute paths in reproducible research in [@sec-collaboration].
:::


As we can see looking at the directory structure, in @exm-ad-swda-download-location, the *swda.tar.zip* file has been added to the *data/original/* directory.

::: {#exm-ad-swda-download-location}
Downloaded SWDA corpus compressed file

```bash
data/
├── analysis/
├── derived/
└── original/
    └── swda.tar.zip
```

:::

Once an compressed file is downloaded, however, the file needs to be 'decompressed' to reveal the directory structure and files. To decompress this *.tar.gz* file we use the `untar()` function with the arguments `tarfile` pointing to the *.tar.gz* file and `exdir` specifying the directory where we want the files to be extracted to. Again, I will assign the arguments to variables. Then we can decompress the file using the `untar()` function.

::: {#exm-ad-swda-decompress-file}
```{r}
#| label: ad-swda-decompress-file
#| eval: false

# Relative path to the compressed file
tar_file <- "../data/original/swda.tar.gz"

# Relative path to the directory to extract to
extract_to_dir <- "../data/original/swda/"

# Decompress .zip file and extract to our target directory
untar(tar_file, extract_to_dir)
```
:::

The directory structure of *data/* in @exm-ad-swda-decompress-location now shows the *swda.tar.gz* file and the *swda* directory that contains the decompressed directories and files.

::: {#exm-ad-swda-decompress-location}
```bash
data/
├── analysis/
├── derived/
└── original/
    ├── swda/
    │   ├── README
    │   ├── doc/
    │   ├── sw00utt/
    │   ├── sw01utt/
    │   ├── sw02utt/
    │   ├── sw03utt/
    │   ├── sw04utt/
    │   ├── sw05utt/
    │   ├── sw06utt/
    │   ├── sw07utt/
    │   ├── sw08utt/
    │   ├── sw09utt/
    │   ├── sw10utt/
    │   ├── sw11utt/
    │   ├── sw12utt/
    │   └── sw13utt/
    └── swda.tar.gz
```
:::

At this point we have acquired the data programmatically and with this code as part of our workflow anyone could run this code and reproduce the same results. The code as it is, however, is not ideally efficient. Firstly the *swda.tar.gz* file is not strictly needed after we decompress it and it occupies disk space if we keep it. And second, each time we run this code the file will be downloaded from the remote server. This leads to unnecessary data transfer and server traffic and will overwrite the data if it already exists in our project directory which could be problematic if the data changes on the remote server. Let's tackle each of these issues in turn.

To avoid writing the *swda.tar.gz* file to disk (long-term) we can use the `tempfile()` function to open a temporary holding space for the file in the computing environment. This space can then be used to store the file, decompress it, and then the temporary file will automatically be deleted. We assign the temporary space to an R object we will name `temp_file` with the `tempfile()` function. This object can now be used as the value of the argument `destfile` in the `download.file()` function. 

::: {#exm-ad-swda-temp-file}
```{r}
#| label: ad-swda-temp-file
#| eval: false

# URL to SWDA corpus compressed file
file_url <- 
  "https://catalog.ldc.upenn.edu/docs/LDC97S62/swb1_dialogact_annot.tar.gz"

# Create a temporary file space for our .tar.gz file
temp_file <- tempfile()

# Download SWDA corpus compressed file
download.file(file_url, temp_file)
```
:::

::: {.callout}
**{{< fa regular hand-point-up >}} Tip**

In @exm-ad-swda-temp-file, I've used the values stored in the objects `file_url` and `temp_file` in the `download.file()` function without specifying the argument names --only providing the names of the objects. R will assume that values of a function map to the ordering of the arguments. If your values do not map to ordering of the arguments you are required to specify the argument name and the value. To view the ordering of objects hit {{< kbd tab >}} after entering the function name or consult the function documentation by prefixing the function name with `?` and hitting {{< kbd enter >}}.
:::

At this point our downloaded file is stored temporarily on disk and can be accessed and decompressed to our target directory using *temp_file* as the value for the argument `tarfile` from the `untar()` function. I've assigned our target directory path to `extract_to_dir` and used it as the value for the argument `exdir`.

<!-- 
Note: `untar()` function arguments needed are not in order and need names 
-->

::: {#exm-ad-swda-untar-temp}
```{r}
#| label: ad-swda-untar-temp
#| eval: false

# Assign our target directory to `extract_to_dir`
extract_to_dir <- "../data/original/swda/"

# Decompress .tar.gz file and extract to our target directory
untar(tarfile = temp_file, exdir = target_dir)
```
:::

Our directory structure in @exm-ad-swda-untar-temp is the same as in @exm-ad-swda-decompress-location, minus the *swda.tar.gz* file.

The second issue I raised concerns the fact that running this code as part of our project will repeat the download each time. Since we would like to be good citizens and avoid unnecessary traffic on the web and avoid potential issues in overwriting data, it would be nice if our code checked to see if we already have the data on disk and if it exists, then skip the download, if not then download it.

The desired functionality we've described can be implemented using the `if()` function. The `if()` function is one of a class of functions known as control statements. **Control statments** allow us to control the flow of our code by evaluating logical statements and processing subsequent code based on the logical value it is passed as an argument. 

So in this case we want to evaluate whether the data directory exists on disk. If it does then skip the download, if not, proceed with the download. In combination with `else` which provides the 'if not' part of the statement, we have the following logical flow in @exm-ad-if-dir-exists.

::: {#exm-ad-if-dir-exists}
```r
if (DIRECTORY_EXISTS) {
  # Do nothing
} else {
  # Download data
}
```
:::

We can simplify this statement by using the `!` operator which negates the logical value of the statement it precedes. So if the directory exists, `!DIRECTORY_EXISTS` will return `FALSE` and if the directory does not exist, `!DIRECTORY_EXISTS` will return `TRUE`. In other words, if the directory does not exist, download the data. This is shown in @exm-ad-if-dir-exists-simplified.

::: {#exm-ad-if-dir-exists-simplified}
```r
if (!DIRECTORY_EXISTS) {
  # Download data
}
```
:::

Now, to determine if a directory exists in our project directory we will turn to the `fs` package [@R-fs]. The `fs` package provides a set of functions for interacting with the file system, including `dir_exists()`. `dir_exists()` takes a path to a directory as an argument and returns the logical value, `TRUE`, if that directory exists, and `FALSE` if it does not. 

We can use this function to evaluate whether the directory exists and then use the `if()` function to process the subsequent code based on the logical flow we set out in @exm-ad-if-dir-exists-simplified. Applied to our project, the code will look like @exm-ad-swda-if-dir-exists.

::: {#exm-ad-swda-if-dir-exists}
```{r}
#| label: ad-swda-if-dir-exists
#| eval: false

# Load the `fs` package
library(fs)

# URL to SWDA corpus compressed file
file_url <- 
  "https://catalog.ldc.upenn.edu/docs/LDC97S62/swb1_dialogact_annot.tar.gz"

# Create a temporary file space for our .tar.gz file
temp_file <- tempfile()

# Assign our target directory to `extract_to_dir`
extract_to_dir <- "../data/original/swda/"

# Check if our target directory exists
# If it does not exist, download the file and extract it
if (!dir_exists(extract_to_dir)) {
  # Download SWDA corpus compressed file
  download.file(file_url, temp_file)
  
  # Decompress .tar.gz file and extract to our target directory
  untar(tarfile = temp_file, exdir = extract_to_dir)
}
```
:::

The code in @exm-ad-swda-if-dir-exists is added to the *1_acquire_data.qmd* file we introduced in @lst-ad-swda-acquire-data-qmd. When this file is run, the SWDA corpus data will be downloaded and extracted to our project directory. If the data already exists, the download will be skipped, just as we wanted.

Before we move on, we need to make sure to create and add the appropriate information to the data origin file. To make this easier, the `qtalrkit` package includes a function, `create_data_origin()`, to create a data origin file template in CSV format. This function takes the path for the desired file. In the SWDA Corpus case, this might be something like: *../data/original/swda_do.csv*. The function only needs to be run once and does not need to be part of the reproducible workflow. 

Running the code in @exm-ad-swda-create-do at the console will create the file. Open it in your preferred text or spreadsheet editor to add the appropriate information. 

::: {#exm-ad-swda-create-do}
```{r}
#| label: ad-swda-create-do
#| eval: false

# Load the `qtalrkit` package
library(qtalrkit)

# Create a data origin file template
create_data_origin("../data/original/swda_do.csv")
```
:::

Our complete project structure for the SWDA corpus data acquisition is shown in @exm-ad-swda-structure.

::: {#exm-ad-swda-structure}
Project structure for the SWDA corpus data acquisition 

```bash
project/
├── code/
│   ├── 1_acquire_data.qmd
│   └── ...
├── data/
│   ├── analysis/
│   ├── derived/
│   └── original/
│       ├── swda_do.csv
│       └── swda/
│          ├── README
│          ├── doc/
│          ├── sw00utt/
│          ├── sw01utt/
│          ├── sw02utt/
│          ├── sw03utt/
│          ├── sw04utt/
│          ├── sw05utt/
│          ├── sw06utt/
│          ├── sw07utt/
│          ├── sw08utt/
│          ├── sw09utt/
│          ├── sw10utt/
│          ├── sw11utt/
│          ├── sw12utt/
│          └── sw13utt/
├── output/
│   ├── figures/
│   ├── reports/
│   ├── results/
│   └── tables/
├── README.md
└── _main.R
```
:::

Great, we've successfully acquired and documented the SWDA Corpus data. We've leveraged R to automate the download and extraction of the data, depending on the existence of the data in our project directory. But you may be asking yourself, "Can't I just navigate to the corpus page and download the data manually myself?" The simple answer is, "Yes, you can." The more nuanced answer is, "Yes, but consider the trade-offs."

The following scenarios highlight the some advantages to automating the process. If you are acquiring data from multiple files, it can become tedious to document the manual process for each file such that it is reproducible. It's possible, but it's error prone. Now, if you are collaborating with others, you will want to share this data with them. It is very common to find data that has limited restrictions for use in academic projects, but the most common limitation is redistribution. This means that you can use the data for your own research, but you cannot share it with others. If you plan on publishing your project to a repository, like GitHub, to share the data as part of your reproducible project, you would be violating the terms of use for the data. By including the programmatic download in your project, you can ensure that your collaborators can easily and effectively acquire the data themselves and that you are not violating the terms of use.

## APIs {#sec-apis}

A convenient alternative method for acquiring data in R is through package interfaces to web services. These interfaces are built using R code to make connections with resources on the web through **Application Programming Interfaces** (APIs). Websites such as Project Gutenberg, Twitter, Facebook, and many others provide APIs to allow access to their data under certain conditions, some more limiting for data collection than others. Programmers (like you!) in the R community take up the task of wrapping calls to an API with R code to make accessing that data from R convenient, and of course reproducible.

::: {.callout}
**{{< fa medal >}} Dive deeper**

Many, many web services provide API access. These APIs span all kinds of data, from text to images to video to audio. Visit the [Public APIs website](https://publicapis.io/) to explore the diversity of APIs available. ROpenSci maintains a curated list of R packages that provide access to data from web services. Visit the [ROpenSci website](https://ropensci.org/packages/data-access/) to explore the packages available.
:::

<!-- Change list of examples: gutenbergr, rwhatsapp, rtoot, jstor? -->

Examples of APIs that provide access to text data include the [Project Gutenberg](https://www.gutenberg.org/) API, the [Twitter](https://developer.twitter.com/en/docs) API, and the [Facebook](https://developers.facebook.com/docs/apis-and-sdks) API. In this section, we will explore the [TalkBank](https://talkbank.org/) API, which provides access to a large collection of spoken language corpora. We will use the [TBDBr](


- [ ] **Pick up here**
  - Introduce CABANK and TalkBank: Useful for a study aiming to research spoken British English, either in isoloation or in comparison to American English (SWDA). 
  - Introduce `TBDBr` package. Show available functions in the package. `ls(getNamespace("TBDBr"))`, Basic arguments for `get*()` functions: `corpusName` and `corpora`
  - Same for these function, demonstrate. So, ideally we could use one function to get all the data we need.
  - [ ] Write custom function to download all resources for a TalkBank API resource.



- [ ] Where to add the function. 
  - [ ] In the relevant script, `1_acquire_data.qmd` in this case.
  - [ ] In a separate file, `functions.R` in this case.
  - [ ] If you have multiple functions, it is good practice to put them in a separate file. Cleans up the main script and makes it easier to find the functions you need and reuse them in other scripts, if needed.

::: {#exm-ad-functions-r}

```bash 
project/
├── code/
│   ├── 1_acquire_data.qmd
│   ├── ...
│   └── functions.R
├── data/
│   ├── analysis/
│   ├── derived/
│   └── original/
├── output/
│   ├── figures/
│   ├── reports/
│   ├── results/
│   └── tables/
├── README.md
└── _main.R
```
:::


::: {.callout}
**{{< fa regular hand-point-up >}} Tip**

Note that that the *functions.R* file is an R script, not a Quarto document. Therefore code blocks that are used in *.qmd* files are not used, only the R code and code comments.
:::

We then use the `source()` function to read that function into our current script to make it available to use as needed. It is good practice to source your functions early on a script so that it is available for use throughout the script.

(note relative path to functions.R)

::: {#exm-ad-source-function}
```{r}
#| label: ad-source-function
#| eval: false

# Load custom functions for this project
source(file = "functions.R")
```
:::

...

::: {.callout}
**{{< fa medal >}} Dive deeper**

Writing functions is a great way to make your code more reproducible. If you find yourself repeating the same code over and over again, it is a good candidate for a function. Functions can be used to automate repetitive tasks, but they can also be used to make your code more readable. If you find yourself writing code that is difficult to understand, it is a good candidate for a function. Functions can be used to make your code more readable by abstracting away the details of the code and providing a name that describes what the code does. This is especially useful when you are writing code that will be used by others. If you are interested in learning more about writing functions, check out the [Writing Functions chapter](https://r4ds.had.co.nz/functions.html) in the [R for Data Science](https://r4ds.had.co.nz/) book.

If you find yourself writing functions that are useful for multiple projects, you may want to consider creating an R package. R packages are a great way to share your code with others. If you are interested in learning more about creating R packages, check out the [R Packages book](https://r-pkgs.org/) by Hadley Wickham and Jenny Bryan.
:::


## Web scraping {#sec-web-scraping}

- [ ] Add example of `rvest::read_html()` 
- [ ] ? Add example of `httr::GET()` with `httr::content()`.
- [ ] `xml2::write_html()`


Federalist papers

- Example of scraping a single page
- Example of scraping multiple pages
  - Pulling out links from single page and then scraping those pages


-----

**Previous material:**

### APIs

A convenient alternative method for acquiring data in R is through package interfaces to web services. These interfaces are built using R code to make connections with resources on the web through **Application Programming Interfaces** (APIs). Websites such as Project Gutenberg, Twitter, Facebook, and many others provide APIs to allow access to their data under certain conditions, some more limiting for data collection than others. Programmers (like you!) in the R community take up the task of wrapping calls to an API with R code to make accessing that data from R possible. For example, [gutenbergr](https://CRAN.R-project.org/package=gutenbergr) provides access to Project Gutenberg, [rtweet](https://CRAN.R-project.org/package=rtweet) to Twitter, and [Rfacebook](https://CRAN.R-project.org/package=Rfacebook) to Facebook.[^acquire-data-2]

[^acquire-data-2]: See Section \@ref(sources) for a list of some other API packages.

<!-- RESOURCES:
- [rwhatsapp](https://github.com/JBGruber/rwhatsapp) work with personal chat history 
-->

- [ ] Add discussion about APIs.
  - [ ] Open access and authentication-based
  - [ ] API documentation
  - [ ] R interface packages: Examples: `gutenbergr`, `rtweet`, `rtoot`, `rwhatsapp`, etc.

- [ ] Introduce TalkBank repository, API, and `TBDBr` package.
  - [ ] Functions

Using R package interfaces, however, often requires some more knowledge about R objects and functions. Let's take a look at how to access data from Project Gutenberg through the `gutenbergr` package. Along the way we will touch upon various functions and concepts that are key to working with the R data types vectors and data frames including filtering and writing tabular data to disk in plain-text format.

To get started let's install and/ or load the `gutenbergr` package. If a package is not part of the R base library, we cannot assume that the user will have the package in their library. The standard approach for installing and then loading a package is by using the `install.packages()` function and then calling `library()`.

```{r}
#| label: ad-standard-install-load-gutenbergr
#| eval: false

install.packages("gutenbergr") # install `gutenbergr` package
library(gutenbergr) # load the `gutenbergr` package
```

This approach works just fine, but luck has it that there is an R package for installing and loading packages! The [pacman](https://CRAN.R-project.org/package=pacman) package includes a set of functions for managing packages. A very useful one is `p_load()` which will look for a package on a system, load it if it is found, and install and then load it if it is not found. This helps potentially avoid using unnecessary bandwidth to install packages that may already exist on a user's system. But, to use `pacman` we need to include the code to install and load it with the functions `install.packages()` and `library()`. I've included some code that will mimic the behavior of `p_load()` for installing `pacman` itself, but as you can see it is not elegant, luckily it's only used once as we add it to the SETUP section of our master file, `_pipeline.R`.

```{r}
#| label: install-load-pacman
#| eval: false

# Load `pacman`. If not installed, install then load.
if (!require("pacman", character.only = TRUE)) {
  install.packages("pacman")
  library("pacman", character.only = TRUE)
}
```

At this point we have data and could move on to processing this dataset in preparation for analysis. However, we are aiming for a reproducible workflow and this code does not conform to our principle of modularity: each subsequent step in our analysis will depend on running this code first. Furthermore, running this code as it is creates issues with bandwidth, as in our previous examples from direct downloads. To address modularity we will write the dataset to disk in **plain-text format**. In this way each subsequent step in our analysis can access the dataset locally. To address bandwidth concerns, we will devise a method for checking to see if the dataset is already downloaded and skip the download, if possible, to avoid accessing the Project Gutenberg server unnecessarily.

To write our data frame to disk we will export it into a standard plain-text format for two-dimensional datasets: a CSV file (comma-separated value). The CSV structure for this dataset will look like this:

```{r}
#| label: ad-csv-snippet
#| eval: false
works_pr |>
  head() |>
  format_csv() |>
  cat()
```

The first line contains the names of the columns and subsequent lines the observations. Data points that contain commas themselves (e.g. "Shaw, Bernard") are quoted to avoid misinterpreting these commas a deliminators in our data. To write this dataset to disk we will use the `reader::write_csv()` function.

```{r}
#| label: ad-write-csv-brit
#| eval: false

write_csv(works_pr, file = "../data/original/gutenberg_works_pr.csv")
```

### Web scraping

There are many resources available through manual and direct downloads from repositories and individual sites and R package interfaces to web resources with APIs, but these resources are relatively limited to the amount of public-facing textual data recorded on the web. In the case that you want to acquire data from webpages, R can be used to access the web programmatically through a process known as web scraping. The complexity of web scrapes can vary but in general it requires more advanced knowledge of R as well as the structure of the language of the web: HTML (Hypertext Markup Language).

#### A toy example

HTML is a cousin of XML (eXtensible Markup Language) and as such organizes web documents in a hierarchical format that is read by your browser as you navigate the web. Take for example the toy webpage I created as a demonstration in @fig-ad-example-webpage.

```{r}
#| label: fig-ad-example-webpage
#| fig-cap: 'Example web page.'
#| echo: false

knitr::include_graphics("figures/acquire-data/ad-example-webpage.png")
```

The file accessed by my browser to render this webpage is `test.html` and in plain-text format looks like this:

```{r}
#| label: ad-html-structure
#| comment: ""
#| echo: false

web_file <- '
<html>
  <head>
    <title>My website</title>
  </head>
  <body>
    <div class="intro">
      <p>Welcome!</p>
      <p>This is my first website. </p>
    </div>
    <table>
      <tr>
        <td>Contact me:</td>
        <td>
          <a href="mailto:francojc@wfu.edu">francojc@wfu.edu</a>
        </td>
      </tr>
    </table>
    <div class="conc">
      <p>Good-bye!</p>
    </div>
  </body>
</html>
'
paste(web_file) |> cat()
```

Each element in this file is delineated by an opening and closing tag, `<head></head>`. Tags are nested within other tags to create the structural hierarchy. Tags can take class and id labels to distinguish them from other tags and often contain other attributes that dictate how the tag is to behave when rendered visually by a browser. For example, there are two `<div>` tags in our toy example: one has the label `class = "intro"` and the other `class = "conc"`. `<div>` tags are often used to separate sections of a webpage that may require special visual formatting. The `<a>` tag, on the other hand, creates a web link. As part of this tag's function, it requires the attribute `href=` and a web protocol --in this case it is a link to an email address `mailto:francojc@wfu.edu`. More often than not, however, the `href=` contains a URL (Uniform Resource Locator). A working example might look like this: `<a href="https://francojc.github.io/">My homepage</a>`.

The aim of a web scrape is to download the HTML file, parse the document structure, and extract the elements containing the relevant information we wish to capture. Let's attempt to extract some information from our toy example. To do this we will need the [rvest](https://CRAN.R-project.org/package=rvest)[@R-rvest] package. First, install/load the package, then, read and parse the HTML from the character vector named `web_file` assigning the result to `html`.

```{r}
#| label: ad-read-html-toy
#| message: false

pacman::p_load(rvest) # install/ load `rvest`

html <- read_html(web_file) # read raw html and parse to xml
html
```

`read_html()` parses the raw HTML into an object of class `xml_document`. The summary output above shows that tags the HTML structure have been parsed into 'elements'. The tag elements can be accessed by using the `html_elements()` function by specifying the tag to isolate.

```{r}
#| label: ad-parse-html-toy-1

html |>
  html_elements("div")
```

Notice that `html_elements("div")` has returned both `div` tags. To isolate one of tags by its class, we add the class name to the tag separating it with a `.`.

```{r}
#| label: ad-parse-html-toy-2
html |>
  html_elements("div.intro")
```

Great. Now say we want to drill down and isolate the subordinate `<p>` nodes. We can add `p` to our node filter.

```{r}
#| label: ad-parse-html-toy-3

html |>
  html_elements("div.intro p")
```

To extract the text contained within a node we use the `html_text()` function.

```{r}
#| label: ad-parse-html-toy-4

html |>
  html_elements("div.intro p") |>
  html_text()
```

The result is a character vector with two elements corresponding to the text contained in each `<p>` tag. If you were paying close attention you might have noticed that the second element in our vector includes extra whitespace after the period. To trim leading and trailing whitespace from text we can add the `trim = TRUE` argument to `html_text()`.

```{r}
#| label: ad-parse-html-toy-5

html |>
  html_elements("div.intro p") |>
  html_text(trim = TRUE)
```

From here we would then work to organize the text into a format we want to store it in and write the results to disk. Let's leave writing data to disk for later in the chapter. For now keep our focus on working with `rvest` to acquire data from html documents working with a more practical example.

#### A practical example

<!-- update: change website to scrape -->
<!-- remember to remove `eval = FALSE` from code chunks to run -->

With some basic understanding of HTML and how to use the `rvest` package, let's turn to a realistic example. 



Say we want to acquire ... . The first step in any web scrape is to investigate the site and page(s) we want to scrape to ascertain if there any licensing restrictions. Many, but not all websites, will include a plain text file [`robots.txt`](https://www.cloudflare.com/learning/bots/what-is-robots.txt/) at the root of the main URL. This file is declares which webpages a 'robot' (including web scraping scripts) can and cannot access. We can use the `robotstxt` package to find out which URLs are accessible ^[It is important to check the paths of sub-domains as some website allow access in some areas and not in others].

<!-- change domain -->

```{r}
#| label: ad-web-permissions

pacman::p_load(robotstxt) # load/ install `robotstxt`

# paths_allowed(paths = "https://www.last.fm/") # check permissions
```

<!-- screenshot of page to scrape -->

The next step includes identifying the URL we want to target and exploring the structure of the HTML document. Take the following webpage I have identified, seen in @fig-ad-example-lyrics-page-lastfm. 

```{r}
#| label: fig-ad-example-lyrics-page-lastfm
#| fig-cap: 'Lyrics page from last.fm'
#| echo: false

# knitr::include_graphics("figures/acquire-data/ad-lastfm-webpage-lyrics.png")
```

As in our toy example, first we want to feed the HTML web address to the `read_html()` function to parse the tags into elements. We will then assign the result to `html`.

<!-- rvest::read_html() -->

```{r}
#| label: ad-read-write-read-page-x
#| echo: false
#| eval: false

# download page, as to avoid server load/ article limits
pacman::p_load(httr)
# get and write to disk
GET(url = "https://www.last.fm/music/Radiohead/_/Karma+Police/+lyrics", write_disk(path = "resources/06-acquire-data/lastfm_web.html"))
```

<!-- show code, but don't evaluate -->

```{r}
#| label: ad-read-page-lyrics-lastfm
#| eval: false

# read and parse html as an xml object
lyrics_url <- "https://www.last.fm/music/Radiohead/_/Karma+Police/+lyrics"
html <- read_html(lyrics_url) # read raw html and parse to xml
html
```

<!-- show html object -->

```{r}
#| label: ad-print-html-lyrics-lastfm
#| echo: false

lyrics_url <- "https://www.last.fm/music/Radiohead/_/Karma+Police/+lyrics" # to use later
# read page back in from disk
html <- read_html(x = "data/acquire-data/lastfm_web.html", encoding = "UTF-8")
html
```

At this point we have captured and parsed the raw HTML assigning it to the object named `html`. The next step is to identify the html elements that contain the information we want to extract from the page. To do this it is helpful to use a browser to inspect specific elements of the webpage. Your browser will be equipped with a command that you can enable by hovering your mouse over the element of the page you want to target and using a right click to select "Inspect" (Chrome) or "Inspect Element" (Safari, Brave). This will split your browser window vertical or horizontally showing you the raw HTML underlying the webpage.

```{r}
#| label: fig-ad-inspect-element-artist-lastfm
#| fig-cap: 'Using the "Inspect Element" command to explore raw html.'
#| echo: false

# knitr::include_graphics("figures/acquire-data/ad-lastfm-artist-inspect.png")
```

<!-- change class/ tag/ attribute appropriately -->

From @fig-ad-inspect-element-artist-lastfm we see that the element we want to target is contained within an `<a></a>` tag. Now this tag is common and we don't want to extract every `a` so we use the class `header-new-crumb` to specify we only want the artist name. Using the convention described in our toy example, we can isolate the artist of the lyrics page.

<!-- change class/ tag/ attribute appropriately -->

```{r}
#| label: ad-extract-artist-lastfm-1
#| eval: false
html |>
  html_element("a.header-new-crumb")
```

We can then extract the text with `html_text()`.

```{r}
#| label: ad-extract-artist-lastfm-2
#| eval: false
artist <-
  html |>
  html_element("a.header-new-crumb") |>
  html_text()
artist
```

Let's extract the song title in the same way. 

<!-- change class/ tag/ attribute appropriately -->

```{r}
#| label: ad-extract-song-title
#| eval: false
song <-
  html |>
  html_element("h1.header-new-title") |>
  html_text()
song
```

Now if we inspect the HTML of the lyrics page, we will notice that the lyrics are contained in `<p></p>` tags with the class `lyrics-paragraph`. 

```{r}
#| label: fig-ad-inspect-element-lyrics-lastfm
#| fig-cap: 'Using the "Inspect Element" command to explore raw html.'
#| echo: false
#| eval: false
# knitr::include_graphics("figures/acquire-data/ad-lastfm-lyrics-inspect.png")
```

Since there are multiple elements that we want to extract, we will need to use the `html_elements()` function instead of the `html_element()` which only targets one element.

```{r}
#| label: ad-extract-lyrics
#| eval: false
lyrics <-
  html |>
  html_elements("p.lyrics-paragraph") |>
  html_text()
lyrics
```

At this point, we have isolated and extracted the artist, song, and lyrics from the webpage. Each of these elements are stored in character vectors in our R session. To complete our task we need to write this data to disk as plain text. With an eye towards a tidy dataset, an ideal format to store the data is in a CSV file where each column corresponds to one of the elements from our scrape and each row an observation. A CSV file is a tabular format and so before we can write the data to disk let's coerce the data that we have into tabular format. We will use the `tibble()` function here to streamline our data frame creation. ^[`tibble` objects are `data.frame` objects with some added extra bells and whistles that we won't get into here.] Feeding each of the vectors `artist`, `song`, and `lyrics` as arguments to `tibble()` creates the tabular format we are looking for.

```{r}
#| label: ad-create-tibble-lastfm-1
#| eval: false
tibble(artist, song, lyrics) |>
  glimpse()
```

Notice that there are seven rows in this data frame, one corresponding to each paragraph in `lyrics`. R has a bias towards working with vectors of the same length. As such each of the other vectors (`artist`, and `song`) are replicated, or recycled, until they are the same length as the longest vector `lyrics`, which a length of seven. 

For good documentation let's add our object `lyrics_url` to the data frame, which contains the actual web link to this page, and assign the result to `song_lyrics`.

```{r}
#| label: ad-create-tibble-lastfm-2
#| eval: false
song_lyrics <- tibble(artist, song, lyrics, lyrics_url)
```

The final step is to write this data to disk. To do this we will use the `write_csv()` function. 

<!-- adjust target file -->

```{r}
#| label: ad-write-csv-lastfm
#| eval: false

write_csv(x = song_lyrics, path = "../data/original/lyrics.csv")
```

#### Scaling up

At this point you may be think, 'Great, I can download data from a single page, but what about downloading multiple pages?' Good question. That's really where the strength of a programming approach takes hold. Extracting information from multiple pages is not fundamentally different than working with a single page. However, it does require more sophisticated understanding of the web and R coding strategies, in particular __iteration__.  

Before we get to iteration, let's first create a couple functions to make it possible to efficiently reuse the code we have developed so far: 

1. the `get_lyrics` function wraps the code for scraping a single lyrics webpage from last.fm. 

```{r}
#| label: ad-get-lyrics-function
#| eval: false
get_lyrics <- function(lyrics_url) {
  # Function: Scrape last.fm lyrics page for: artist, song, 
  # and lyrics from a provided content link. 
  # Return as a tibble/data.frame
  
  cat("Scraping song lyrics from:", lyrics_url, "\n")
  
  pacman::p_load(tidyverse, rvest) # install/ load package(s)
  
  url <- url(lyrics_url, "rb") # open url connection 
  html <- read_html(url) # read and parse html as an xml object
  close(url) # close url connection
  
  artist <- 
    html |> 
    html_element("a.header-new-crumb") |> 
    html_text()
  
  song <- 
    html |> 
    html_element("h1.header-new-title") |> 
    html_text()
  
  lyrics <- 
    html |> 
    html_elements("p.lyrics-paragraph") |> 
    html_text()
  
  cat("...one moment ")
  
  Sys.sleep(1) # sleep for 1 second to reduce server load
  
  song_lyrics <- tibble(artist, song, lyrics, lyrics_url)
  
  cat("... done! \n")
  
  return(song_lyrics)
}
```

::: callout-warning
**Tip**

The `get_lyrics` function includes all of the code developed previously, but also includes: (1) output messages (`cat()`), (2) a processing pause (`Sys.sleep()`), and (3) code to manage opening and closing web connections (`url()` and `close()`). 

Points (1) and (2) will be useful when we iterate over this function to provide status messages and to reduce server load when processing multiple webpages from a web domain. (3) will be necessary to manage webpages that are non-existent. As we will see, we will generate url link to multiple song lyrics some of which will not be valid. To avoid errors that will stop the processing these steps have been incorporated here.
:::

2. the `write_content` writes the webscraped data to our local machine, including functionality to create the necessary directory structure of the target file path we choose.

```{r}
#| label: ad-write-content-function
#| eval: false

write_content <- function(content, target_file) {
  # Function: Write the tibble content to disk. Create the directory if
  # it does not already exist.
  
  pacman::p_load(tidyverse) # install/ load packages
  
  target_dir <- dirname(target_file) # identify target file directory structure
  dir.create(path = target_dir, recursive = TRUE, showWarnings = FALSE) # create directory
  write_csv(content, target_file) # write csv file to target location
  
  cat("Content written to disk!\n")
}
```

With just these two functions, we can take a lyrics URL from last.fm and scrape and write the data to disk like this.

```{r}
#| label: ad-get-write-single-lyric-lastfm
#| eval: false

lyrics_url <- "https://www.last.fm/music/Pixies/_/Where+Is+My+Mind%3F/+lyrics"

lyrics_url |>
  get_lyrics() |>
  write_content(target_file = "../data/original/lastfm/lyrics.csv")
```

```bash
data/original/lastfm/
└── lyrics.csv
```

Now we could manually search and copy URLs and run this function pipeline. This would be fine if we had just a few particular URLs that we wanted to scrape. But if we want to, say, scrape a set of lyrics grouped by genre. We would probably want a more programmatic approach. The good news is we can leverage our understanding of webscraping to scrape last.fm to harvest the information needed to create and store links to songs by genre. We can then pass these links to a pipeline, similar to the previous one, to scrape lyrics for many songs and store the results in files grouped by genre.

Last.fm provides a genres page where some of the top genres are listed and can be further explored.  

```{r}
#| label: fig-ad-genre-page-lastfm
#| fig-cap: 'Genre page on last.fm'
#| echo: false
#| eval: false
# knitr::include_graphics("figures/acquire-data/ad-lastfm-genres.png")
```

Diving into a a particular genre, 'rock' for example, you will get a listing of the top tracks in that genre. 

```{r}
#| label: fig-ad-genre-tracks-list-lastfm
#| fig-cap: 'Tracks by genre list page on last.fm'
#| echo: false
#| eval: false
# knitr::include_graphics("figures/acquire-data/ad-lastfm-genre-tracks-list.png")
```

If we inspect the HTML elements for the track names in @fig-ad-genre-tracks-list-lastfm, we can see that a relative URL is found for the track. In this case, I have 'Smells Like Teen Spirit' by Nirvana highlighted in the inspector. If we follow this link to the track page and then to the lyrics for the track, you will notice that the relative URL on the track listings page has all the unique information. Only the web domain `https://www.last.fm` and the post-pended `/+lyrics` is missing. 

So with this we can put together a function which gets the track listing for a last.fm genre, scrapes the relative URLs for each of the tracks, and creates a full absolute URL to the lyrics page. 

```{r}
#| label: ad-get-genre-lyrics-url-lastfm
#| eval: false
get_genre_lyrics_urls <- function(last_fm_genre) {
  # Function: Scrapes a given last.fm genre title for top tracks in
  # that genre and then creates links to the lyrics pages for these tracks
  
  cat("Scraping top songs from:", last_fm_genre, "genre: \n")
  
  pacman::p_load(tidyverse, rvest) # install/ load packages
  
  # create web url for the genre listing page
  genre_listing_url <- 
    paste0("https://www.last.fm/tag/", last_fm_genre, "/tracks") 
  
  genre_lyrics_urls <- 
    read_html(genre_listing_url) |> # read raw html and parse to xml
    html_elements("td.chartlist-name a") |> # isolate the track elements
    html_attr("href") |> # extract the href attribute
    paste0("https://www.last.fm", ., "/+lyrics") # join the domain, relative artist path, and the post-pended /+lyrics to create an absolute URL
  
  return(genre_lyrics_urls)
}
```

With this function, all we need is to identify the verbatim way last.fm lists the genres. For Rock, it is `rock` but for Hip Hop, it is `hip+hop`. 

```{r}
#| label: ad-save-get-genre-lyrics-urls-lastfm
#| echo: false
#| eval: false

hip_hop_lyrics <- get_genre_lyrics_urls("hip+hop")
saveRDS(hip_hop_lyrics, file = "data/acquire-data/hip_hop_lyrics.rds")
```

```{r}
#| label: ad-demo-get-genre-lyrics-urls-lastfm
#| eval: false

get_genre_lyrics_urls("hip+hop") |> # get urls for top hip hop tracks
  head(n = 10) # only display 10 tracks
```

```{r}
#| label: ad-print-get-genre-lyrics-urls-lastfm
#| echo: false
#| eval: false

hip_hop_lyrics <- read_rds(file = "data/acquire-data/hip_hop_lyrics.rds")
cat("Scraping top songs from: hip+hop genre:\n")
hip_hop_lyrics |>
  head(n = 10)
```

So now we have a method to scrape URLs by genre and list them in a vector. Our approach, then, could be to pass these lyrics URLs to our existing pipeline which downloads the lyrics (`get_lyrics()`) and then writes them to disk (`write_content()`). 

```{r}
#| label: ad-example-genre-pipeline-lastfm-1
#| eval: false

# Note: will not run
get_genre_lyrics_urls("hip+hop") |> # get lyrics urls for specific genre
  get_lyrics() |> # scrape lyrics url
  write_content(target_file = "../data/original/lastfm/hip_hop.csv") # write to disk
```

This approach, however, has a couple of problems. (1) our `get_lyrics()` function only takes one URL at a time, but the result of `get_genre_lyrics_urls()` will produce many URLs. We will be able to solve this with iteration using the [purrr]() package, specifically the `map()` function which will iteratively map each URL output from `get_genre_lyrics_urls()` to `get_lyrics()` in turn. (2) the output from our iterative application of `get_lyrics()` will produce a tibble for each URL, which then sets up a problem with writing the tibbles to disk with the `write_content()` function. To avoid this we will want to combine the tibbles into one single tibble and then send it to be written to disk. The `bind_rows()` function will do just this. 

```{r}
#| label: ad-example-genre-pipeline-lastfm-2
#| eval: false

# Note: will run, but with occasional errors
get_genre_lyrics_urls("hip+hop") |> # get lyrics urls for specific genre
  map(get_lyrics) |> # scrape lyrics url
  bind_rows() |> # combine tibbles into one
  write_content(target_file = "../data/original/lastfm/hip_hop.csv") # write to disk
```

This preceding pipeline conceptually will work. However, on my testing, it turns out that some of the URLs that are generated in the `get_genre_lyrics_urls()` do not exist on the site. That is, the song is listed but no lyrics have been added to the song site. This will mean that when the URL is sent to the `get_lyrics()` function, there will be an error when attempting to download and parse the page with `read_html()` which will halt the entire process. To avoid this error, we can wrap the `get_lyrics()` function in a function designed to attempt to download and parse the URL (`tryCatch()`), but if there is an error, it will skip it and move on to the next URL without stopping the processing. This approach is reflected in the `get_lyrics_catch()` function below. 

```{r}
#| label: ad-get-lyrics-catch-lastfm
#| eval: false

# Wrap the `get_lyrics()` function with `tryCatch()` to 
# skip URLs that have no lyrics

get_lyrics_catch <- function(lyrics_url) {
  tryCatch(get_lyrics(lyrics_url), 
           error = function(e) return(NULL)) # no, URL, return(NULL)/ skip
}
```

Updating the pipeline with the `get_lyrics_catch()` function would look like this:

```{r}
#| label: ad-example-genre-pipeline-lastfm-3
#| eval: false

# Note: will run, but we can do better
get_genre_lyrics_urls("hip+hop") |> # get lyrics urls for specific genre
  map(get_lyrics_catch) |> # scrape lyrics url
  bind_rows() |> # combine tibbles into one
  write_content(target_file = "../data/original/lastfm/hip_hop.csv") # write to disk
```

This will work, but as we have discussed before one of this goals we have we acquiring data for a reproducible research project is to make sure that we are developing efficient code that will not burden site's server we are scraping from. In this case, we would like to check to see if the data is already downloaded. If not, then the script should run. If so, then the script does not run. Of course this is a perfect use of a conditional statement. To make this a single function we can call, I've wrapped the functions we created for getting lyric URLs from last.fm, scraping the URLs, and writing the results to disk in the `download_lastfm_lyrics()` function below. I also added a line to add a `last_fm_genre` column to the combined tibble to store the name of the genre we scraped (i.e. `mutate(genre = last_fm_genre)`.

```{r}
#| label: ad-download-lyrics-lastfm-function
#| eval: false
download_lastfm_lyrics <- function(last_fm_genre, target_file) {
  # Function: get last.fm lyric urls by genre and write them to disk
  
  if(!file.exists(target_file)) {
    
    cat("Downloading data.\n")
    
    get_genre_lyrics_urls(last_fm_genre) |> 
      map(get_lyrics_catch) |> 
      bind_rows() |> 
      mutate(genre = last_fm_genre) |> 
      write_content(target_file)
    
  } else {
    cat("Data already downloaded!\n")
  }
}
```

Now we can call this function on any genre on the last.fm site and download the top 50 song lyrics for that genre (provided they all have lyrics pages).

```{r}
#| label: ad-download-lyrics-genre-lastfm-show
#| eval: false

# Scrape lyrics for 'pop'
download_lastfm_lyrics(last_fm_genre = "pop", target_file = "../data/original/lastfm/pop.csv")

# Scrape lyrics for 'rock'
download_lastfm_lyrics(last_fm_genre = "rock", target_file = "../data/original/lastfm/rock.csv")

# Scrape lyrics for 'hip hop'
download_lastfm_lyrics(last_fm_genre = "hip+hop", target_file = "../data/original/lastfm/hip_hop.csv")

# Scrape lyrics for 'metal'
download_lastfm_lyrics(last_fm_genre = "metal", target_file = "../data/original/lastfm/metal.csv")
```

Now we can see that our web scrape data is organized in a similar fashion to the other data we acquired in this chapter.

```bash
data/
├── derived/
└── original/
    ├── cedel2/
    │   └── texts.csv
    ├── gutenberg/
    │   ├── works_pq.csv
    │   └── works_pr.csv
    ├── lastfm/
    │   ├── country.csv
    │   ├── hip_hop.csv
    │   ├── lyrics.csv
    │   ├── metal.csv
    │   ├── pop.csv
    │   └── rock.csv
    ├── sbc/
    │   ├── meta-data/
    │   └── transcriptions/
    ├── scs/
    │   ├── README
    │   ├── discourse
    │   ├── disfluency
    │   ├── documentation/
    │   ├── tagged
    │   ├── timed-transcript
    │   └── transcript
    └── twitter/
        └── rt_latinx.csv
```

Again, it is important to add these custom functions to our `acquire_functions.R` script in the `functions/` directory so we can access them in our scripts more efficiently and make our analysis steps more succinct and legible. 


In this section we covered scraping language data from the web. The rvest package provides a host of functions for downloading and parsing HTML. We first looked at a toy example to get a basic understanding of how HTML works and then moved to applying this knowledge to a practical example. To maintain a reproducible workflow, the code developed in this example was grouped into task-oriented functions which were in turn joined and wrapped into a function that provided convenient access to our workflow and avoided unnecessary downloads (in the case the data already exists on disk).

Here we have built on previously introduced R coding concepts and demonstrated various others. Web scraping often requires more knowledge of and familiarity with R as well as other web technologies. Rest assured, however, practice will increase confidence in your abilities. I encourage you to practice on your own with other websites. You will encounter problems. Consult the R documentation in RStudio or online and lean on the R community on the web at sites such as [Stack Overflow](https://stackoverflow.com/) *inter alia*.

### Documentation

As part of the data acquisition process it is important include documentation that describes the data resource(s) that will serve as the base for a research project. For all resources the data should include as much information possible that outlines the sampling frame of the data [@Adel2020]. For a corpus sample acquired from a repository will often include documentation which will outline the sampling frame --this most likely will be the very information which leads a researcher to select this resource for the project at hand. It is important to include this documentation (HTML or PDF file) or reference to the documentation (article citation or link^[Note that web links can change and it is often best to safeguard the documentation by downloading the HTML documentation page instead of linking]) within the reproducible project's directory structure.

In other cases where the data acquisition process is formulated and conducted by the researcher for the specific aims of the research (i.e. API and web scraping approaches), the researcher should make an effort to document those aspects which are key for the study, but that may also be of interest to other researchers for similar research questions. This will may include language characteristics such as modality, register, genre, etc., speaker/ writer characteristics such as demographics, time period(s), context of the linguistic communication, etc. and process characteristics such as the source of the data, the process of acquisition, date of acquisition, etc. However, it is important to recognize that each language sample and the resource from which it is drawn is unique. As a general rule of thumb, a researcher should document the resource as if this were a resource *they* were to encounter for the first time. To archive this information, it is standard practice to include a `README` file in the relevant directory where the data is stored.

```bash
data/
├── derived/
└── original/
    ├── cedel2/
    │   ├── documentation/
    │   └── texts.csv
    ├── gutenberg/
    │   ├── README.md
    │   ├── works_pq.csv
    │   └── works_pr.csv
    ├── lastfm/
    │   ├── README.md
    │   ├── country.csv
    │   ├── hip_hop.csv
    │   ├── lyrics.csv
    │   ├── metal.csv
    │   ├── pop.csv
    │   └── rock.csv
    ├── sbc/
    │   ├── meta-data/
    │   └── transcriptions/
    ├── scs/
    │   ├── README
    │   ├── discourse
    │   ├── disfluency
    │   ├── documentation/
    │   ├── tagged
    │   ├── timed-transcript
    │   └── transcript
    └── twitter/
        ├── README.md
        └── rt_latinx.csv
```

For both existing corpora and data samples acquired by the researcher it is also important to signal if there are conditions and/ or licensing restrictions that one should heed when using and potentially sharing the data. In some cases existing corpus data come with restrictions on data sharing. These can be quite restrictive and ultimately require that the corpus data not be included in publically available reproducible project or data can only be shared in a derived format. If this the case, it is important to document the steps to legally acquire the data so that a researcher can acquire their own license and take full advantage of your reproducible project. 

In the case of data from APIs or web scraping, there too may be stipulations on sharing data. A growing number of data sources apply one of [the available Creative Common Licenses](https://creativecommons.org/about/cclicenses/). Check the source of your data for more information and if you are a member of a research institution you will likely have a [specialist](https://zsr.wfu.edu/digital-scholarship/copyright/) on [Copyright and Fair Use](https://www.copyright.gov/fair-use/more-info.html). 

## Summary {-}

In this chapter we have covered a lot of ground. On the surface we have discussed three methods for acquiring corpus data for use in text analysis. In the process we have delved into various aspects of the R programming language. Some key concepts include writing custom functions and working with those function in an iterative manner. We have also considered topics that are more general in nature and concern interacting with data found on the internet. 

Each of these methods should be approached in a way that is transparent to the researcher and to would-be collaborators and the general research community. For this reason the documentation of the steps taken to acquire data are key both in the code and in human-facing documentation. 

At this point you have both a bird’s eye view of the data available on the web and strategies on how to access a great majority of it. It is now time to turn to the next step in our data analysis project: data curation. In the next posts I will cover how to wrangle your raw data into a tidy dataset. This will include working with and incorporating meta-data as well as augmenting a dataset with linguistic annotations.

## Activities {.unnumbered}

- [ ] Add description of outcomes 

::: {.callout}
**{{< fa regular file-code >}} Recipe**

<!-- Understand, apply, and analyze verbs: https://tips.uark.edu/blooms-taxonomy-verb-chart/ -->

- [ ] update

**What**: [Control statements, custom functions, and iteration](https://lin380.github.io/tadr/articles/recipe_6.html)\
**How**: Read Recipe 6 and participate in the Hypothes.is online social annotation.\
**Why**: To increase your ability to produce effective, concise, and reproducible code. The three main areas we will cover are working with control statements, writing custom functions, and leveraging iteration. These programming strategies are often useful for acquiring data but, as we will see, they are powerful concepts that can be used throughout a reproducible research project. 
:::

::: {.callout}
**{{< fa flask >}} Lab**

<!-- Analyze, evaluate, and create verbs: https://tips.uark.edu/blooms-taxonomy-verb-chart/ -->

- [ ] update

**What**: [Control statements, custom functions, and iteration](https://github.com/lin380/lab_6)\
**How**: Clone, fork, and complete the steps in Lab 6.\
**Why**: To gain experience working with coding strategies such as control statements, custom functions, and iteration, practice working with direct downloads and API interfaces to acquire data, and implement organizational strategies for organizing data in reproducible fashion.
:::

## Questions {.unnumbered}

::: {.callout}
**Conceptual questions**

- ...
- For many resources, information to describe the data origin is found on the resource's website. Visit the XXX resource and complete the data origin information. 
:::

::: {.callout}
**Technical exercises**

- ...
- ...
:::

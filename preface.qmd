# Preface {#sec-preface .unnumbered}

```{r}
#| label: setup-options
#| child: "_common.qmd"
#| cache: false
```

<!--

Content:
- [x] Add approach section information.
  - [x] Add information on the 'tidyverse' and why it is used in this textbook.
- [x] Consider revamping the Aims section to reflect my current student learning outcomes.
- [ ] Consider whether to advocate for RStudio Desktop/ Cloud or include VS Code as an alternative.
- [ ] Refine the 'To the instructor' section.
- [x] Update resources (Text as Data to Quantitative Text Analysis Resources `qtalr` site and package)
  - [x] Change GitHub organization name to `qtalr`
- [ ] Add activity questions to this preface chapter
- [ ] Move Swirl to qtalr repo and document in this chapter

Standardize language: 

- [ ] Think about how to refer to readers: 'readers', 'students', 'researchers', or more directly 'you'. 
- [ ] Standardize language for: 'book/ textbook', Swirl/ Coding lessons/ Interactive R lessons, etc., 
Exercises:


Formatting:


-->

> The journey of a thousand miles begins with one step.
>
> --- [Lao Tzu](https://en.wikipedia.org/wiki/Laozi)


::: {.callout}
## {{< fa regular list-alt >}} Outcomes

- Comprehend the book's rationale, learning goals, and pedagogical approach.
- Navigate and engage with the book's structure and content effectively.
- Interpret conventions used in the book reliably.
- Set up the computing environment and utilize textbook and support resources for an optimal learning experience.
:::

The purpose of this chapter is to present the rationale behind this textbook, outline the key learning objectives, describe the pedagogical approach, and identify the intended audience. Additionally, this chapter will provide readers with a guide to the book's structure and the scope of its content, as well as instructions for the instructor and a summary of supporting resources available. Finally, this chapter will provide readers with information on setting up their computing environment and where to seek support.

## Rationale {.unnumbered}

Data science, an interdisciplinary field that combines knownledge and skills from statistics, computer science, and domain-specific expertise to extract meaningful insight from structured and unstructured data, has emerged as an exciting and rapidly growing field in recent years, driven in large part by the increase in computing power available to the average individual and the abundance of electronic data now available through the internet. These advances have become an integral part of the modern scientific landscape, with data-driven insights now being used to inform decision-making in a wide variety of academic fields, including linguistics and language-related disciplines.

This textbook seeks to meet this growing demand by providing an introduction to the fundamental concepts and practical programming skills from data science applied to the task of quantitative text analysis. It is intended primarily for undergraduate students, but may also be useful for graduates and researchers seeking to expand their methodological toolbox. The textbook takes a pedagogical approach which assumes no prior experience with statistics or programming, making it an accessible resource for novices beginning their exploration of quantitative text analysis methods.

## Aims {.unnumbered}

The overarching goal of this textbook is to provide readers with foundational knowledge and practical skills to conduct and evaluate quantitative text analysis using the R programming language and other open source tools and technologies. The specific aims are to develop the reader's proficiency in three main areas:

-  **Data literacy:** Identify, interpret and evaluate data analysis procedures and results

> Throughout this textbook we will explore topics which will help you understand how data analysis methods derive insight from data. In this process you will be encouraged to critically evaluate connections across linguistic and language-related disciplines using data analysis knowledge and skills. Data literacy is an invaluable skillset for academics and professionals but also is an indispensable aptitude for in the 21st century citizens to navigate and actively participate in the 'Information Age' in which we live [@Carmi2020].

-  **Research skills:** Design, implement, and communicate quantitative research

> This aim does not differ significantly, in spirit, from common learning outcomes in a research methods course. However, working with text will incur a series of key steps in the selection, collection, and preparation of the data that are unique to text analysis projects. In addition, I will stress the importance of research documentation and creating reproducible research as an integral part of modern scientific inquiry [@Buckheit1995].

-  **Programming skills:** Apply programmatic strategies to develop and collaborate on reproducible research projects

> Modern data analysis, and by extension, text analysis is conducted using programming. There are various key reasons for this: a programming approach (1)  affords researchers unlimited research freedom --if you can envision it, you can program it, (2)  underlies well-documented and reproducible research, and (3)  invites researchers to engage more intimately with the data and the methods for analysis. 


These aims are important for linguistics students because they provide a foundation for concepts and in the skills required to succeed in the rapidly evolving landscape of 21st-century research. These abilities enable researchers to evaluate and conduct high-quality empirical investigation across linguistic fields on a wide variety of topics. Moreover, these skills go beyond linguistics research; they are widely applicable across many disciplines where quantitative data analysis and programming are becoming increasingly important. Thus, this textbook provides students with a comprehensive introduction to quantitative text analysis that is relevant to linguistics research and that equips them with valuable skills for their future careers.

## Approach {.unnumbered}

The approach taken in this textbook is designed to accomodate linguistics students and researchers with little to no prior experience with programming or quantitative methods. With this in mind the objective is connect conceptual understanding with practical application. Real-world data and research tasks relevant to linguistics are used thoughtout the book to provide context and to motivate the learning process. Furthermore, as an introduction to the field, the textbook focuses on the most common and fundamental methods and techniques for quantitative text analysis and prioritizes breadth over depth and intuitive understanding over technical explanations. On the programming side, the Tidyverse approach to programming in R will be adopted. This approach provides a consistent syntax across different packages and is known for its legibility, making it easier for readers to understand and write code. In sum, these strategies form an approach that is intended to provide readers with an accessbile resource to gain a foothold in the field and to equip them with the knowledge and skills to apply quantitative text analysis in their own research.

## Structure {.unnumbered}

The aims and approach described above is reflected in the overall structure of the book and at the chapter level.

### Book level {.unnumbered}

At the book level, there are five interdependent parts: 

Part I "Orientation" provides the necessary background knowledge to situate quantitative text analysis in the wider context of data analysis and linguistic research and to provide a clearer picture of what text analysis entails and its range of applications.

The subsequent parts are directly aligned with the data analysis process. The building blocks of this process are reflected in 'Data to Insight Hierarchy (DIKI)' visualized in @fig-diki-hierarchy-bw [^preface-1].

[^preface-1]: Adapted from @Ackoff1989 and @Rowley2007.

```{r}
#| label: fig-diki-hierarchy-bw
#| fig-cap: 'Data to Insight Hierarchy (DIKI)'
#| fig-alt: 'Data to Insight Hierarchy (DIKI) which is a pyramid with the following levels: Data, Information, Knowledge, and Insight. The Data level is at the bottom and the Insight level is at the top. The Data level is the largest and the Insight level is the smallest.'
#| echo: false

knitr::include_graphics("figures/p-diki-hierarchy-bw.png")
```

The DIKI Hierarchy highlights the stages and intermediate steps required to derive insight from data. Part II "Foundations" provides a conceptual introduction to the DIKI Hierarchy and establishes foundational knowledge about data, information, knowledge, and insight which is fundamental to developing a viable research plan. 

Parts III "Preparation" and IV "Analysis" focus on the implementation process. Part III covers the steps involved in preparing data for analysis, including data acquisition, curation, and transformation. Part IV covers the steps involved in conducting analysis, including exploratory, predictive, and inferential data analysis.

The final part, Part V "Communication", covers the final stage of the data analysis process, which is to communicate the results of the analysis. This includes the structure and content of research reports as well as the process of publishing, sharing, and collaborating on research.

### Chapter level {.unnumbered}

At the chapter level, both conceptual and programming skills are developed in stages[^preface-2]. The chapter-level structure is consistent across chapters and can be seen in @tbl-structure-approach. 

[^preface-2]: These stages attempt to capture the general progression of learning reflected in Bloom's Taxonomy (see  @Krathwohl2002 for a description and revision).

| Component | Purpose | Resource | Stage |
| :--- | :--- | :--- | :--- |
| Outcomes | Identify the learning objectives for the chapter | Textbook | Introduction |
| Overview | Provide a brief introduction to the chapter topic | Textbook | Introduction |
| Coding Lessons | Teach programming techniques with hands-on interactive exercises | GitHub | Skills 
| Content | Combine conceptual discussions and programming skills, incorporating thought-provoking questions, relevant studies, and advanced topic references | Textbook | Knowledge |
| Recipes | Offer step-by-step programming examples related to the chapter | Resources website | Comprehension |
| Labs | Allow readers to apply chapter-specific concepts and techniques | GitHub | Application |
| Summary | Review the key concepts and skills covered in the chapter | Textbook | Review |
| Questions | Assess and expand the reader's knowledge and abilities | Textbook | Assessment |

: The general structure of a chapter including: the component, its purpose, where to find the resource, and the target learning stage. {#tbl-structure-approach}{tbl-colwidths="[15, 55, 15, 15]"}

Each chapter will begin with a list of key learning outcomes followed by a brief introduction to the chapter's content. The goal is to orient the reader to the chapter. Next there will be a prompt to complete the interactive coding lesson(s) to introduce reader's to key programming concepts related to the chapter though hands-on experience and then the main content of the chapter will follow. The content will be a combination of conceptual discussions and programming skills, incorporating thought-provoking questions ('Consider this'), relevant studies ('Case study'), and advanced topic references ('Dive deeper'). Together these components form the skills and knowledge phase. The next phase is the application phase. This phase will include step-by-step programming demonstrations related to the chapter (Recipes) and lab exercises that allow readers to apply their knowledge and skills chapter-related tasks. Finally the chapter concludes with a summary of the key concepts and skills covered in the chapter and a set of questions to assess and expand the reader's knowledge and abilities.

## Resources {.unnumbered}

There are three main resources available to support the aims and approach of this textbook. Firstly, the textbook itself provides prose discussion, figures/ tables, R code, case studies, and thought and practical exercises. Secondly, there is a companion R package called qtalrkit [@R-qtalrkit], which includes functions for accessing data and datasets, as well as various useful functions developed specifically for this textbook. In addition, there is a comprehensive website [Quantitative Text Analysis for Linguistics Resources](https://qtalr.github.io/qtalrkit/) that includes programming tutorials and demonstrations to enhance the reader's recognition of how programming strategies are implemented. Finally, a [GitHub repository](https://github.com/qtalr) is provided which contains both a set of interactive R programming lessons (Swirl) and lab exercises designed to guide the reader through practical hands-on programming applications. The companion qtalrkit package and the GitHub repository are both under active development and will be updated regularly to ensure that supplementary materials remain relevant to the content of the text.

- [ ] Add errata section to the package website and document above.

## To the instructor {.unnumbered}

Depending on the experience level and expectations of your readers, you may want to consider adopting one of the following course designs for using this textbook.

### Basic Introduction {.unnumbered}

- Cover chapters 1-5 in sequence to give your readers a foundational understanding of quantitative text analysis.
- Culminate the course with a research proposal assignment that requires them to identify an interesting linguistic problem, propose ways of solving it using the methods covered in class, and identify potential data sources.
- If your readers have little to no experience with R, you may want to consider using the RStudio Cloud platform to host the course. This will provide them with a pre-installed R environment and allow them to focus on learning the material rather than troubleshooting.

### Intermediate Introduction {.unnumbered}

- Cover chapters 1, 5-10 in sequence to give your readers a deeper understanding of quantitative text analysis methods. Explore additional case studies or dataset examples throughout the course if you wish to supplement your lectures.
- Culminate the course with a research project assignment that allows your readers to apply what they've learned to linguistic content of their choice.
- You may consider using the RStudio Cloud platform to host the course, but ensure that your readers have access to R and RStudio on their own computers as well.

### Advanced Introduction {.unnumbered}

- Cover all 12 chapters to give your readers a thorough understanding of quantitative text analysis concepts and techniques. Devote more time chapters 5-10 providing demonstrations of how to approach different problems and evaluating alternative approaches.
- Culminate the course with a collaborative research project that requires your readers to work in groups to conduct a comprehensive analysis of a given dataset.
- Ensure that your readers install R and RStudio on their own computers as they will need full control over their coding environment.


For all course designs, it is strongly recommend that you evaluate the readers' success in understanding the material by providing a combination of quizzes, lab assignments, programming exercises, and written reports. Additionally, encourage your readers to ask questions, collaborate with peers, and seek help from the ample resources available online when they encounter scope-limited programming problems.

## Getting started {.unnumbered}

Before jumping in to this and subsequent chapter's textbook activities, it is important to prepare your computing environment and understand how to take advantage of the resources available, both those directly and indirectly associated with the textbook.

### R and IDEs {.unnumbered}

Programming is the backbone for modern quantitative research. Among the many programming languages available, R is a popular open-source  language and software environment for statistical computing. R is popular with statisticians and has been adopted as the *de facto* language by many other fields in natural and social sciences, including linguistics. It is freely downloadable from [The R Project for Statistical Programming](https://www.r-project.org/) website and is available for [macOS, Linux, and Windows](https://cloud.r-project.org/) operating systems.

Successfully installing R is rarely the last step in setting up your R-enabled computing environment. The majority of R users also install an **Integrated Development Environment** (IDE). An IDE, such as [RStudio](https://posit.co/products/open-source/rstudio/) or [Visual Studio Code](https://code.visualstudio.com/), provide a **graphical user interface** (GUI) for working with R. In effect, IDEs provide a dashboard for working with R and are designed to make it easier to write and execute R code. IDEs also provide a number of other useful features such as syntax highlighting, code completion, and debugging. IDEs are not required to work with R but they are *highly* recommended.

Choosing to install R and an IDE on your personal computer, which is know as your **local environment**, is not the only option to work with R. You can also choose to work with R in the cloud, a **remote environment**. There are a number of cloud-based options for working with R, including [RStudio Cloud](https://www.rstudio.com/products/cloud/) and [Microsoft Azure](https://learn.microsoft.com/en-us/azure/architecture/data-guide/technology-choices/r-developers-guide). These options provide a pre-configured R environment that you can access from any computer with an internet connection. The advantage of working in the cloud is that you do not need to install R or an IDE on your local computer. The disadvantage is that you will need to be connected to the internet to work with R and the free tiers for these services are limited. If you are new to R, you may want to consider working in the cloud to get started. If you plan to continue to work with R in the future, you will most likely want to install R and an IDE on your local computer or explore using a **virtual environment**. Virtual environments, such as [Docker](https://www.docker.com/), provide a way to use a pre-configured computing environment or create your own that you can share with others. Virtual environments are a good option if you want to ensure that everyone in your research group is working with the same computing environment. Pre-configured virtual environments exist for R through the [Rocker project](https://rocker-project.org/) and can be used locally or in the cloud. 
 
There are trade-offs in terms of cost, convenience, and flexibility when choosing to work with R in a local, remote, or virtual environment. The choice is yours and you can always change your mind later. The important thing is to get started and begin learning R. Furthermore, any of the approaches described here will be compatible with this textbook.

For more information and instructions consult the following guides. 

::: {.callout}
## {{< fa regular file-code >}} Guides

- [Installing R](https://qtalr.github.io/articles/guide-0.html)
- [Choosing and setting up an IDE](https://qtalr.github.io/articles/guide-1.html)
- [Working with R in remote and virtual environments](https://qtalr.github.io/articles/guide-2.html)


:::

### R packages {.unnumbered}

Throughout your R programming journey you will take advantage of code created by other R users in the form of packages. A package is a downloadable set of functions and/ or datasets which aim to accomplish a given cohesive set of related tasks. There are official R package repositories such as [CRAN](https://cran.r-project.org/) (Comprehensive R Archive Network) and other packages are available on code-sharing repositories such as [GitHub](https://github.com/).

::: {.callout}
#### {{< fa regular lightbulb >}} Consider this
The Comprehensive R Archive Network (CRAN) includes groupings of popular packages related to a given applied programming task called [Task Views](https://cran.r-project.org/web/views/). Explore the available CRAN Task Views listings. Note the variety of areas (tasks) that are covered in this listing. Now explore in more detail one of the following task views which are directly related to topics covered in this textbook noting the associated packages and their descriptions: (1) Cluster, (2) MachineLearning, (3) NaturalLanguageProcessing, or (4) ReproducibleResearch.
:::

You will download a number of packages at different stages of this textbook, but there is a set of packages that will be key to have from the get go. Once you have access to a working R/ RStudio environment, you can proceed to install the following packages.

Install the following packages from CRAN.

-   `tidyverse`
-   `rmarkdown`
-   `tinytex`
-   `devtools`
-   `usethis`
-   `swirl`

You can do this by running the following code in the RStudio Console pane.

```r
 # install key packages from CRAN
install.packages(c("tidyverse", "rmarkdown", "tinytex", "devtools", "usethis", "swirl"))
```

Or you can use the RStudio Packages pane and click 'Install' and type the names of the packages.

This textbook includes a support package `tadr` which is available on GitHub ([source code](https://github.com/lin380/tadr)). To install this package from a GitHub repository, you run the following code in the RStudio Console pane:

``` r
# install the tadr package from GitHub
devtools::install_github("lin380/tadr") 
```

Finally, although not a package we will need to download the interactive R programming lessons for this textbook that will be accessed with the `swirl` package. Download these lessons by running the following code in the RStudio Console pane.

``` r
# install the swirl lessons for this textbook
swirl::install_course_github("lin380", "swirl")
```

Later in this Preface and then at the beginning of each subsequent chapter there will be swirl lessons to complete. To load and choose a lesson to start, you will run the following code in the RStudio Console pane.

``` r
# load the swirl package
library(swirl) 
# run swirl
swirl()
```

You will then follow the prompts to select and complete the desired lesson.

### Git and GitHub {.unnumbered}

[GitHub](https://github.com/) is a code sharing website. Modern computing is highly collaborative and GitHub is a very popular platform for sharing and collaborating on coding projects. The [lab exercises for this textbook](https://github.com/stars/francojc/lists/labs) are shared on GitHub. To access and complete these exercises you will need to [sign up for a (free) GitHub account](https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home) and then set up the version control software `git` on your computing environment. `git` is the conduit to interfacing GitHub and for many `git` will already be installed on your computer (or cloud computing environment). To verify your installation (or for installation instructions) and to set up your `git` configuration, consult the very useful [Happy Git and GitHub for the useR](https://happygitwithr.com/) chapter [Install Git](https://happygitwithr.com/install-git.html).

### Getting help {.unnumbered}

The technologies employed in this approach to text analysis will include a somewhat steep learning curve. And in all honesty, the learning never stops! Experienced programmers and novices alike require support. Fortunately there is a very large community of programmers who have developed many official support resources and who actively contribute to unofficial discussion forums. Together these resources provide ample methods for overcoming any challenge.

The easiest and most convenient place to get help with either R or RStudio is through the RStudio "Help" toolbar menu. There you will find links to help resources, guides, and manuals. R packages often include "Vignettes" (long-form documentation and demonstrations). These can be accessed either by running `browseVignettes()` in the RStudio Console pane or by searching for the package using a search engine in your web browser and consulting the package documentation there (e.g. [`usethis`](https://usethis.r-lib.org/)). For some of the more common packages you can find [cheatsheets](https://www.rstudio.com/resources/cheatsheets/) on the RStudio website.

For Git and GitHub I recommend [Happy Git and GitHub for the useR](https://happygitwithr.com/) but the official [Git](https://git-scm.com/doc) and [GitHub](https://docs.github.com/en) documentation pages are great resources as well.

There are a number of very popular discussion forum websites where the programming community asks and answers questions to real-world issues. These sites often have subsections dedicated to particular programming languages or software. Here is a list of some of the most useful in my experience:

-   StackOverflow: [R](https://stackoverflow.com/questions/tagged/r), [Git](https://stackoverflow.com/questions/tagged/git), [RStudio](https://stackoverflow.com/questions/tagged/rstudio), [GitHub](https://stackoverflow.com/questions/tagged/github)
-   Reddit: [R](https://www.reddit.com/r/rstats/), [Git](https://www.reddit.com/r/git/), [RStudio](https://www.reddit.com/r/RStudio/), [Github](https://www.reddit.com/r/github/)
-   [RStudio Community](https://community.rstudio.com/)

If you post a question on one of these communities ensure that if your question involves some coding issue or error that you provide enough background such that the community will be able to help you. This is often referred to as a "reproducible example" or "reprex". A reprex is a minimal piece of code that demonstrates the issue you are having. It is a very useful tool for both asking and answering questions. Here is a great resource for learning how to create a reprex:

-   https://reprex.tidyverse.org/

-   https://github.com/MilesMcBain/datapasta

<!-- 
- [ ] Work on reprex example with/without RStudio?
- [ ] Example of a reprex on StackOverflow: https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example
 -->

```{r}
#| label: datapasta-example-5
#| eval: false

# paste the data frame into a reprex
reprex::reprex()
```


```{r}
#| label: reprex-example-1
#| eval: false

install.packages("reprex") # install reprex package
```

```{r}
#| label: reprex-example-2
#| eval: false
# Create a vector with 100 random values from the normal distribution
set.seed(123) # set seed for reproducibility
my_vec <- rnorm(100) # random normal vector

summary(my_vec) # 5 number summary
```

```{r}
#| label: reprex-example-3
#| eval: false

reprex::reprex() # run reprex
```

Datapasta is a package that allows you to copy and paste data frames from RStudio into a reprex. This is a very useful tool for creating reproducible examples. Here is an example of how to use datapasta to create a reprex. 

```{r}
#| label: datapasta-example-1
#| eval: false

# install the datapasta package
install.packages("datapasta")
```

```{r}
#| label: datapasta-example-2
#| eval: false

# load the datapasta package
library(datapasta)
```

```{r}
#| label: datapasta-example-3
#| eval: false

# Create a data frame with 100 random values from the normal distribution
set.seed(123) # set seed for reproducibility
my_df <- data.frame(x = rnorm(100)) # random normal data frame
```

```{r}
#| label: datapasta-example-4
#| eval: false

# copy the data frame to the clipboard
dpasta(my_df)
```

The take-home message here is that you are not alone. There are many people world-wide that are learning to program and/ or contribute to the learning of others. The more you engage with these resources and communities the more successful your learning will be. As soon as you are able, pay it forward. Posting questions and offering answers helps the community and engages and refines your skills --a win-win.

## Conventions {.unnumbered}

This textbook is about the concepts for understanding and the techniques for doing quantitative text analysis with R. Therefore there will be an intermingling of prose and code presented. As such, an attempt to establish consistent conventions throughout the text has been made to signal the reader's attention as appropriate.

### Prose conventions {.unnumbered}

The following typographic conventions are used throughout the text:

- *Italics*
  - Filenames, file extensions, directory paths, and URLs.

- `Fixed-width`
  - Variable names, function names, and in-line code including expressions and operators.

- **Bold**
  - Key concepts when first introduced.

- [Linked text]()
  - Links to internal and external resources, footnotes, and citations including references to R packages when first introduced.

### Code block conventions {.unnumbered}

More lengthy code will be presented in code blocks as seen below.

```{r}
#| label: code-block
#| echo: true

# A function that takes a name and returns a greeting
greet <- function(name) { # function definition
  paste("Hello", name) # print greeting
} # end function definition

greet(name = "Jerid") # apply function to a name
```

There are a couple of things to note about this code block. First, this code block shows the code that is run in R as well as the ouput that is returned. The code will appear in a box and the output will appear below the box. Both code and output will appear in fixed-width font. Output which is text will be prefixed with `>`. Second, the `#` symbol is used to signal a **code comment**, a human-facing description. Everything right of a `#` is not run as code. In this textbook you will see code comments above code on a separate line and to the right of code on the same line. It is good practice to comment your code to enhance readability and to help others understand what your code is doing.

::: {.callout .content-visible when-format="html"}
#### {{< fa regular hand-point-up >}} Tip

If you are reading this textbook in a web browser there are two more features that you should be aware of. First, you can click on the code block to copy the code to your clipboard. Second, you can click on a function name to see the help documentation for that function.
:::

All figures, tables, and images in this textbook are generated by code chunks but only code for those elements that are relevant for discussion will be shown. However, if you wish to see the code for any element in this textbook, you can visit the GitHub repository <https://qtalr.github.io/book/>.

### Callout conventions {.unnumbered}

Callouts are used to signal the reader's attention. The following callouts are used in this textbook:

**Content**

::: {.callout}
### {{< fa regular list-alt >}} Outcomes

Learning outcomes for the chapter appear here.
:::

::: {.callout}
### {{< fa regular lightbulb >}} Consider this

Points for you to consider and questions to explore appear here.
:::

::: {.callout}
### {{< fa regular file-alt >}} Case study

Case studies for applying conceptual knowledge and coding skills covered in the chapter appear here.
:::

::: {.callout}
### {{< fa medal >}} Dive deeper

Links to additional resources for diving deeper into the topic appear here.
:::

**Activities**

::: {.callout}
### {{< fa terminal >}} Swirl lesson

Links to swirl lessons for practicing coding skills for the chapter appear here.
:::

::: {.callout}
### {{< fa regular file-code >}} Recipe

Links to demonstration programming tasks on the qtalr site for the chapter appear here.
:::

::: {.callout}
### {{< fa flask >}} Lab

Links to lab exercises for applying conceptual knowledge and coding skills on the qtalr GitHub repository for the chapter appear here.
:::

**Other**

::: {.callout}
### {{< fa regular hand-point-up >}} Tip

Tips for using R and related tools appear here.
:::

::: {.callout}
### {{< fa exclamation-triangle >}} Warning

Warnings for using R and related tools appear here.
:::

## Activities {.unnumbered}

::: {.callout}
### {{< fa terminal >}} Swirl lesson

**What**: [Intro to Swirl](https://github.com/lin380/swirl)\
**How**: In the R Console pane load `swirl`, run `swirl()`, and follow prompts to select the lesson.
**Why**: To familiarize you with navigating, selecting, and completing swirl lessons.
:::

::: {.callout}
## {{< fa regular file-code >}} Recipe

**What**: [Literate programming I](https://lin380.github.io/tadr/articles/recipe_1.html)\
**How**: Read Recipe 1 and participate in the Hypothes.is online social annotation.\
**Why**: To introduce the concept of Literate Programming using R, RStudio, and R Markdown.
:::

::: {.callout}
## {{< fa flask >}} Lab

**What**: [Literate programming I](https://github.com/lin380/lab_1)\
**How**: Clone, fork, and complete the steps in Lab 1.\
**Why**: To put literate programming techniques covered in Recipe 1 into practice. Specifically, you will create and edit an R Markdown document and render a report in PDF format.
:::

## Summary {.unnumbered}

<!-- In this preface I've provided the rationale and aims of this textbook. The structure of the texbook and the associated resources work to scaffold your learning and proficiency in the areas of Data literacy, Research skills, and Programming skills. The textbook include a series of conventions to signal important concepts, questions to explore, and resources available. As in the area of Data Science in general, quantitative text analysis is most effectively conducted using programmatic approaches. The process will not be without challenges but the gains are well worth the effort. I've outlined key resources to obtain support that are invaluable for the novice as well as the seasoned practitioner. -->

This preface introduces readers to quantitative text analysis in the context of data science. It outlines the aims and approach of the textbook, emphasizing accessibility and reproducibility of research practices through the use of R programming and tidyverse approach. The chapter also provides resources, including a companion R package, GitHub repository, and conventions that will be used for key elements such as figures, tables, formulas, code blocks, and exercises. Finally, it offers suggestions for instructors, based on different levels of experience, for covering chapters and culminating projects. By following the guidelines set out in this preface, readers can expect to learn the practical skills and conceptual understanding necessary to conduct research with textual data.


## Questions {.unnumbered}

::: callout-note
## Conceptual questions

1. What is the purpose of the textbook and what are the three skills it aims to scaffold?
2. What are the key components of quantitative text analysis?
3. What is the role of programmatic approaches in quantitative text analysis?
4. What are the potential challenges involved in conducting quantitative text analysis and why are the gains worth the effort?
5. What are some key resources available to support learning and conducting quantitative text analysis effectively?
6. How does the structure of the textbook and associated resources work to support learning and proficiency in the areas of data literacy, research skills, and programming skills?
7. What are the conventions used in the textbook to signal important concepts and questions to explore?
8. How is the textbook designed to be accessible for both novice and seasoned practitioners in the area of quantitative text analysis?
9. What are some key resources available to obtain support for learning and conducting quantitative text analysis effectively?
10. What is the relationship between R and an IDE (e.g. RStudio, VS Code)?
11. What is the relationship between R and a version control system (e.g. Git, GitHub)?
12. What is the relationship between R and a package manager (e.g. CRAN, Bioconductor)?

---

* What is the goal of data science, and how has it become popular in recent years?
* Who is the intended readership for this textbook, and why is it designed to be accessible to a wide audience?
* What are the main components of each chapter, and how are they structured to support learning outcomes?
* Why is programming emphasized as an important skill for implementing text analysis techniques, and what language is used in this textbook?
* What resources are available to support the aims and approach of the textbook, and how are they helpful for readers?

:::

::: callout-note
## Technical exercises

1. Install the latest version of R by following the instructions for your operating system. <https://cran.r-project.org/>
2. Install an IDE
  - RStudio: a popular Integrated Development Environment (IDE) for R. This will provide a user-friendly interface for writing, testing, and debugging R code. <https://rstudio.com/products/rstudio/download/>
  - VS Code: a popular IDE for many programming languages. This will provide a user-friendly interface for writing, testing, and debugging R code. <https://code.visualstudio.com/download>
3. Install Git, a version control system that allows you to track changes to files and collaborate with others. <https://git-scm.com/downloads>
4. Create a GitHub account. <...> <!-- # Add link to GitHub account setup -->
5. Install the `tidyverse` package by running `install.packages("tidyverse")` in the R Console pane.
6. Install the `swirl` package by running `install.packages("swirl")` in the R Console pane.
7. Open RStudio and create a new project for this textbook. This will help you keep your code and files organized.
8. Fork the textbook repository to own GitHub repository and then clone it to your local machine. This will create a local copy of the textbook on your computer. <!-- # Add instructions for cloning a repo -->
9. Open the textbook in RStudio and explore the structure of the project. <!-- # Add instructions for opening a project -->
10. Open the `index.qmd` file and knit the document. This will render the textbook in HTML format. <!-- # Add instructions for knitting a document -->
11. Add, commit, and push your changes to the textbook to your GitHub repository. <!-- # Add instructions for adding, committing, and pushing changes -->
:::


- [ ] How to add a futher reading section? 

## Further reading {.unnumbered}

- Bryan, J., & Hester, J. (2020). Happy Git and GitHub for the useR. https://happygitwithr.com/ @Bryan2020
- Wickham, H., & Grolemund, G. (2017). R for Data Science (First edit). O’Reilly Media. http://r4ds.had.co.nz/ @wickham2017
- @PositPBC2023